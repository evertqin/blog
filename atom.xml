<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qin</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://evertqin.github.io/blog/"/>
  <updated>2017-06-23T21:44:59.008Z</updated>
  <id>https://evertqin.github.io/blog/</id>
  
  <author>
    <name>R Qin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Convert table to delimited string</title>
    <link href="https://evertqin.github.io/blog/2016/02/04/post33/"/>
    <id>https://evertqin.github.io/blog/2016/02/04/post33/</id>
    <published>2016-02-04T05:00:00.000Z</published>
    <updated>2017-06-23T21:44:59.008Z</updated>
    
    <content type="html"><![CDATA[<p>Something we need to convert a table into delimited string for, say, log or exception message, there are three ways to do it in TSQL</p>
<a id="more"></a>
<h4 id="Aggregate-with-variable"><a href="#Aggregate-with-variable" class="headerlink" title="Aggregate with variable"></a>Aggregate with variable</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DECLARE @Result NVARCHAR(2000) = N&apos;&apos; /*Important! Assign empty string to the return variable*/</div><div class="line"></div><div class="line">SELECT @Result = @Result + CONVERT(NVARCHAR(100), ID) + N&apos;,&apos; </div><div class="line">    FROM @Table</div><div class="line">SET @Result = SUBSTRING(@Result, 0, LEN(@Result)) /* Need to remove trailing delimiter*/</div></pre></td></tr></table></figure>
<h4 id="Use-XML-PATH"><a href="#Use-XML-PATH" class="headerlink" title="Use XML PATH"></a>Use XML PATH</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DECLARE @Result NVARCHAR(2000) /* Initial assignment is optional */</div><div class="line"></div><div class="line">SELECT @Result = STUFF((SELECT &apos;,&apos; + CONVERT(NVARCHAR(100), ID) + &apos;,&apos; + Description FROM @Result FOR XML PATH(&apos;&apos;)), 1, 1, &apos;&apos; )</div></pre></td></tr></table></figure>
<h4 id="Use-COALESCE"><a href="#Use-COALESCE" class="headerlink" title="Use COALESCE"></a>Use COALESCE</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DECLARE @result NVARCHAR(1000) = N&apos;&apos;</div><div class="line"></div><div class="line">SELECT @result = COALESCE(@result + &apos;,&apos;, &apos;&apos;) + description FROM targetingservice</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Something we need to convert a table into delimited string for, say, log or exception message, there are three ways to do it in TSQL&lt;/p&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="SQL" scheme="https://evertqin.github.io/blog/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>sp_executesql in Transact-SQL</title>
    <link href="https://evertqin.github.io/blog/2016/02/03/post32/"/>
    <id>https://evertqin.github.io/blog/2016/02/03/post32/</id>
    <published>2016-02-03T05:00:00.000Z</published>
    <updated>2017-06-23T21:44:51.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Why-we-want-to-use-sp-executesql"><a href="#Why-we-want-to-use-sp-executesql" class="headerlink" title="Why we want to use sp_executesql"></a>Why we want to use sp_executesql</h1><p>One use case for this stored procedure is when we need to do parameterized linked query using <code>OPENQUERY</code>. I could have constructed a string with the parameter decorated by some special characters such as <code></code> (This resembles the handlebar a lot, or AngularJS) and use <code>EXEC</code> to execute the query. However, a fundamental flaw with that approach is that I will not be able to return a value since the query cannot be parameterized. With the help of sp_executesql, we are able to provide input and output parameters</p>
<a id="more"></a>
<h1 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h1><p>Please take a look at the following query<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span> @LinkedServer <span class="keyword">NVARCHAR</span>(<span class="number">100</span>) = <span class="string">'v2'</span>,</div><div class="line">        @<span class="keyword">id</span> = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">DECLARE</span> @InputQuery <span class="keyword">NVARCHAR</span>(<span class="number">2000</span>),</div><div class="line">        @ParmDefinition <span class="keyword">NVARCHAR</span>(<span class="number">2000</span>),</div><div class="line">        @TotalCount <span class="built_in">INT</span></div><div class="line"></div><div class="line"><span class="keyword">SET</span> @ValInputQuery = N<span class="string">'SELECT @TotalCountOut = COUNT FROM OPENQUERY('</span> </div><div class="line">                     + @LinkedServer + <span class="string">',''SELECT COUNT(1) from myTable  WHERE id=&#123;id&#125;'')'</span> </div><div class="line"><span class="keyword">SET</span> @ValInputQuery = <span class="keyword">Replace</span>(@InputQuery, <span class="string">'&#123;id&#125;'</span>, @<span class="keyword">id</span>) </div><div class="line"><span class="keyword">SET</span> @ParmDefinition = N<span class="string">'@TotalCountOut int OUTPUT'</span> </div><div class="line"></div><div class="line"><span class="keyword">EXECUTE</span> sp_executesql </div><div class="line">  @ValInputQuery, </div><div class="line">  @ParmDefinition, </div><div class="line">  @TotalCountOut = @TotalCount <span class="keyword">output</span></div></pre></td></tr></table></figure></p>
<p>According to the <a href="">Official Document</a>, the query has the following format</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sp_executesql [ @stmt = ] statement</div><div class="line">[ </div><div class="line">  &#123; , [ @params = ] N&apos;@parameter_name data_type [ OUT | OUTPUT ][ ,...n ]&apos; &#125; </div><div class="line">     &#123; , [ @param1 = ] &apos;value1&apos; [ ,...n ] &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>Simply speaking, it looks like</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">EXECUTE</span> sp_executesql </div><div class="line"> @InputQuery, </div><div class="line"> @ParmDefinition, </div><div class="line"> @Parameter1, @Parameter2...</div></pre></td></tr></table></figure>
<p>In the code sample, we have one output parameter <code>@TotalCountOut</code>, after return, we can check the value of <code>@TotalCountOut</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Why-we-want-to-use-sp-executesql&quot;&gt;&lt;a href=&quot;#Why-we-want-to-use-sp-executesql&quot; class=&quot;headerlink&quot; title=&quot;Why we want to use sp_executesql&quot;&gt;&lt;/a&gt;Why we want to use sp_executesql&lt;/h1&gt;&lt;p&gt;One use case for this stored procedure is when we need to do parameterized linked query using &lt;code&gt;OPENQUERY&lt;/code&gt;. I could have constructed a string with the parameter decorated by some special characters such as &lt;code&gt;&lt;/code&gt; (This resembles the handlebar a lot, or AngularJS) and use &lt;code&gt;EXEC&lt;/code&gt; to execute the query. However, a fundamental flaw with that approach is that I will not be able to return a value since the query cannot be parameterized. With the help of sp_executesql, we are able to provide input and output parameters&lt;/p&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="SQL" scheme="https://evertqin.github.io/blog/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Setup Jersey Restful service in Intellij</title>
    <link href="https://evertqin.github.io/blog/2016/02/01/post31/"/>
    <id>https://evertqin.github.io/blog/2016/02/01/post31/</id>
    <published>2016-02-01T05:00:00.000Z</published>
    <updated>2017-06-23T21:44:44.325Z</updated>
    
    <content type="html"><![CDATA[<p>Having played with Nodejs for a while, I decided to try some other web framwwork for a change, having used Tomcat a little bit, I decide to try a simple java based restful service with Jersey + Tomcat. Most of the online tutorials are based on eclipse or based on maven. Here I am using Intellij with gradle. I used <a href="https://github.com/jasonray/jersey-starterkit/wiki/Create-a-&quot;Hello-World&quot;-jersey-project" target="_blank" rel="external">this article</a> as reference.</p>
<a id="more"></a>
<ol>
<li>Start a new project and select gradle as project type. Also choose the Web as this may come handy in the future<br><img src="/home/ruogu/Pictures/post31/choose_gradle.png" alt="Choose gradle"></li>
<li>Enter the GroupId and ArtifactId, then in the next screen, choose gradle version and JVM version (I use gradle 2.10 and JDK 1.8u72). Pick a project name then click “Finish”</li>
<li><p>To enable the build, we need to first declare some dependencies, here I am using maven repositories to get required dependencies</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">group &apos;com.sample.gradle_sample&apos;</div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">apply plugin: &apos;java&apos;</div><div class="line">apply plugin: &apos;war&apos;</div><div class="line"></div><div class="line">sourceCompatibility = 1.5</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile &apos;javax.ws.rs:javax.ws.rs-api:2.0.1&apos;</div><div class="line">    compile &apos;com.sun.jersey:jersey-server:1.8&apos;</div><div class="line">    testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.11&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>We include two dependencies for now, [javax.ws.rs](https://jax-rs-spec.java.net) will enable restful endpoints by using annotation in the code. Jersey is the required library for building restful service.
</code></pre><ol>
<li><p>create src/main/java/{groupId}/test.java file, replace {groupId} with the one you specified when you setup the project.</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">package com.tripplan.dev_tracker.service;</div><div class="line"></div><div class="line">import jdk.nashorn.internal.objects.annotations.Getter;</div><div class="line"></div><div class="line">import javax.ws.rs.GET;</div><div class="line">import javax.ws.rs.Path;</div><div class="line">import javax.ws.rs.PathParam;</div><div class="line">import javax.ws.rs.Produces;</div><div class="line">import javax.ws.rs.core.MediaType;</div><div class="line">import javax.ws.rs.core.Response;</div><div class="line"></div><div class="line">@Path(&quot;myresource&quot;)</div><div class="line">public class MyResource &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Method handling HTTP GET requests. The returned object will be sent</div><div class="line">     * to the client as &quot;text/plain&quot; media type.</div><div class="line">     *</div><div class="line">     * @return String that will be returned as a text/plain response.</div><div class="line">     */</div><div class="line">    @GET</div><div class="line">    @Produces(MediaType.TEXT_PLAIN)</div><div class="line">    public String getIt() &#123;</div><div class="line">        return &quot;Got it!&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Create src/main/webapp/WEB-INF folder, then create a file web.xml, copy the following code</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:web=&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;</div><div class="line">    &lt;display-name&gt;jersey sample&lt;/display-name&gt;</div><div class="line">    &lt;servlet&gt;</div><div class="line">        &lt;servlet-name&gt;Jersey&lt;/servlet-name&gt;</div><div class="line">        &lt;servlet-class&gt;com.sun.jersey.spi.container.servlet.ServletContainer&lt;/servlet-class&gt;</div><div class="line">        &lt;init-param&gt;</div><div class="line">            &lt;param-name&gt;com.sun.jersey.config.property.packages&lt;/param-name&gt;</div><div class="line">            &lt;param-value&gt;com.sample.gradle_sample.service&lt;/param-value&gt;</div><div class="line">        &lt;/init-param&gt;</div><div class="line"></div><div class="line">        &lt;!-- the following is only needed if you want to use the built-in support</div><div class="line">        for mapping pojo objects to json. --&gt;</div><div class="line">        &lt;init-param&gt;</div><div class="line">            &lt;param-name&gt;com.sun.jersey.api.json.POJOMappingFeature&lt;/param-name&gt;</div><div class="line">            &lt;param-value&gt;true&lt;/param-value&gt;</div><div class="line">        &lt;/init-param&gt;</div><div class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class="line">    &lt;/servlet&gt;</div><div class="line">    &lt;servlet-mapping&gt;</div><div class="line">        &lt;servlet-name&gt;Jersey&lt;/servlet-name&gt;</div><div class="line">        &lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt;</div><div class="line">    &lt;/servlet-mapping&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure>
<p> To enable Jersey support, we need to tell the server some information.</p>
<ul>
<li><p>Under <code>&lt;servlet&gt;</code>, we need to tell jersey where to find the packages specifying the endpoints, here the package is <code>com.sample.gradle_sample.service</code> which should match what you used for your java source file</p>
</li>
<li><p>The url-pattern is also important, in this example it is <code>/rest/*</code>, so the final endpoint will be like <code>{server}/rest/myresource</code>. </p>
</li>
</ul>
</li>
<li><p>Open <code>Gradle projects</code> tool window by going to View -&gt; Tool Windows -&gt; Gradles, click the blue “Refresh” button if there are any unresolved dependencies. Once everything is fine, excute <code>./gradlew war</code> in your project directory. This will generate a war file under ./build/libs.</p>
<p> <img src="/home/ruogu/Pictures/post31/gradle_jobs.png" alt="refresh"></p>
</li>
<li>Make sure your Tomcat server is running, for setting up Tomcat, it is very straightforward, you can follow this <a href="http://www.vogella.com/tutorials/ApacheTomcat/article.html" target="_blank" rel="external">tutorial</a>, or there are tons of others over Google. Copy the war file from the previous step to the {Tomcat folder}/webapp, wait a bit till Tomcat pick up the war file.</li>
<li>Now you can test it by going to <code>http://localhost:8080/gradle_sample-1.0-SNAPSHOT/rest/myresource</code>. This is ugly but you can change the name of the war file before dropping it to the Tomcat folder.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Having played with Nodejs for a while, I decided to try some other web framwwork for a change, having used Tomcat a little bit, I decide to try a simple java based restful service with Jersey + Tomcat. Most of the online tutorials are based on eclipse or based on maven. Here I am using Intellij with gradle. I used &lt;a href=&quot;https://github.com/jasonray/jersey-starterkit/wiki/Create-a-&amp;quot;Hello-World&amp;quot;-jersey-project&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;this article&lt;/a&gt; as reference.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="Java" scheme="https://evertqin.github.io/blog/tags/Java/"/>
    
      <category term="Jersey" scheme="https://evertqin.github.io/blog/tags/Jersey/"/>
    
  </entry>
  
  <entry>
    <title>Setup Jersey Restful service in Intellij</title>
    <link href="https://evertqin.github.io/blog/2016/01/01/post30/"/>
    <id>https://evertqin.github.io/blog/2016/01/01/post30/</id>
    <published>2016-01-01T05:00:00.000Z</published>
    <updated>2017-06-23T21:44:35.631Z</updated>
    
    <content type="html"><![CDATA[<p>Having played with Nodejs for a while, I decided to try some other web framwwork for a change, having used Tomcat a little bit, I decide to try a simple java based restful service with Jersey + Tomcat. Most of the online tutorials are based on eclipse or based on maven. Here I am using Intellij with gradle.</p>
<a id="more"></a>
<ol>
<li>Start a new project and select gradle as project type. Also choose the Web as this may come handy in the future<br><img src="/home/ruogu/Pictures/post31/choose_gradle.png" alt="Choose gradle"></li>
<li>Enter the GroupId and ArtifactId, then in the next screen, choose gradle version and JVM version (I use gradle 2.10 and JDK 1.8u72). Pick a project name then click “Finish”</li>
<li>To enable the build, we need to first declare some dependencies, here I am using maven repositories to get required dependencies<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">group &apos;com.sample.gradle_sample&apos;</div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">apply plugin: &apos;java&apos;</div><div class="line">apply plugin: &apos;war&apos;</div><div class="line"></div><div class="line">sourceCompatibility = 1.5</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile &apos;javax.ws.rs:javax.ws.rs-api:2.0.1&apos;</div><div class="line">    compile &apos;com.sun.jersey:jersey-server:1.8&apos;</div><div class="line">    testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.11&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>We include two dependencies for now, <a href="https://jax-rs-spec.java.net" target="_blank" rel="external">javax.ws.rs</a> will enable restful endpoints by using annotation in the code. Jersey is the required library for building restful service.</p>
<ol>
<li>create src/main/java/{groupId}/test.java file, replace {groupId} with the one you specified when you setup the project.<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">package com.tripplan.dev_tracker.service;</div><div class="line"></div><div class="line">import jdk.nashorn.internal.objects.annotations.Getter;</div><div class="line"></div><div class="line">import javax.ws.rs.GET;</div><div class="line">import javax.ws.rs.Path;</div><div class="line">import javax.ws.rs.PathParam;</div><div class="line">import javax.ws.rs.Produces;</div><div class="line">import javax.ws.rs.core.MediaType;</div><div class="line">import javax.ws.rs.core.Response;</div><div class="line"></div><div class="line">@Path(&quot;myresource&quot;)</div><div class="line">public class MyResource &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Method handling HTTP GET requests. The returned object will be sent</div><div class="line">     * to the client as &quot;text/plain&quot; media type.</div><div class="line">     *</div><div class="line">     * @return String that will be returned as a text/plain response.</div><div class="line">     */</div><div class="line">    @GET</div><div class="line">    @Produces(MediaType.TEXT_PLAIN)</div><div class="line">    public String getIt() &#123;</div><div class="line">        return &quot;Got it!&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Having played with Nodejs for a while, I decided to try some other web framwwork for a change, having used Tomcat a little bit, I decide to try a simple java based restful service with Jersey + Tomcat. Most of the online tutorials are based on eclipse or based on maven. Here I am using Intellij with gradle.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="Java" scheme="https://evertqin.github.io/blog/tags/Java/"/>
    
      <category term="Jersey" scheme="https://evertqin.github.io/blog/tags/Jersey/"/>
    
  </entry>
  
  <entry>
    <title>2015 年终总结</title>
    <link href="https://evertqin.github.io/blog/2016/01/01/post29/"/>
    <id>https://evertqin.github.io/blog/2016/01/01/post29/</id>
    <published>2016-01-01T05:00:00.000Z</published>
    <updated>2017-06-23T21:44:17.278Z</updated>
    
    <content type="html"><![CDATA[<p>我在写这个开头的时候，脑中跳出的头一句是：“2015是变革的一年，是发展的一年，是丰收的一年”。可以是觉得有点写思想汇报即视感，于是作罢。<br>想要写点什么新奇的东西，可以又觉得任凭我怎么总结2015都会有所疏漏，因而作此文不为总结，只为留下些东西，权作日后的参考。</p>
<a id="more"></a>
<h3 id="2015新工作的开始"><a href="#2015新工作的开始" class="headerlink" title="2015新工作的开始"></a>2015新工作的开始</h3><p>2015开始的标志是新工作的开始。2014人生的低谷以从Bloomberg辞职划上了一个句号。遇到那些恶心的事情也没什么好抱怨的，只能说天时地利人和自己一个不占，又没有什么实力，被小人暗算也是情理之中。好在在年终及时找到新工作，结束了长达半年的折磨。整个事件过去一年了，回想起来那些细节却依然历历在目，小人的各种鬼蜮伎俩实令人难以招架，最后以自己一败涂地收尾。虽然临走时在HR那边仔细说明了事件的经过，但是应该没有什么效用，一个离开公司的人，你的画又能有多少分量。</p>
<p>加入新公司，所有事情都是新的：搬到了乡下的新家，又恢复自己住的日子，从每天坐地铁上下班改成开车上下班，从一个几千人的大公司到了一个只有不到100人的小公司，从一幢高大上的玻璃大楼搬到狭小而且没有窗户的小办公司，落差确实很大。索性新工作就有很多有趣的新技术可以学，从头开始学C#，研究ASP.NET,修理奇怪的Bug，研究怎么提高算法的效率，提高计算的速度。总体来说，在小公司一年学到的东西要比在Bloomberg三年学到的东西多得多。更可贵的是，小公司也没有复杂的政治斗争，人际就是工作关系，目标简单：做好工作，创造价值。此外无他。所以一起工作都是以创造价值为基础的。比如做的第一个项目是把一份用了很久的测试软件升级为64位，因为这份软件很消耗内存，而32位寻址最大到4GB的限制就很影响软件的应用。整个项目耗时大约1个月，因为不是很简单的把Build Target改成x64就能解决问题，要处理很多包的依赖性问题，因为32位和64不位不能轻易混用，又要考虑重新编译很多第三方的库，最后还要保证输出的输出的数值和原来元件相同。看起来不复杂的任务也做了很久。</p>
<p>第二个项目是我最主要的项目，要求把一个原先用Matlab写的库全部转换成C#。经过研究，决定使用商业的软件作为数值计算的基础，而中间又经历了很多次的测试和Profiling，我会在另外一片文章中仔细讲如何提到ILNumerics的性能，以达到比Matlab速度还快，毕竟全部使用CPU的库要达到使用GPU的库的速度，还是需要些技巧。</p>
<h3 id="2015-工作之余"><a href="#2015-工作之余" class="headerlink" title="2015 工作之余"></a>2015 工作之余</h3><p>2015年中面过Amazon纽约被拒后，自己分析了下自身的情况，决定停止面试转而想办法提到业务水平，作为以个转行CS的业余码工，许多知识都闻所未闻，及时知道了也是一知半解。于是决定开始用Evernote记录平时遇到的一些好东西，比如微信上面的分享文章，网络上的技术博客，或者Stackoverflow上不错的问答。同时决定开始从头开始制作博客。因为想做一个类似沙盒的博客，也就是说，以后可以随时拿这个博客来测试一些新奇的玩意，所以我没有现成的像是Wordpress或者Blogger这样服务，而是用NodeJs搭出现在这个博客。中间件用的是Express，后面加挂Reddit作为缓存。前台用RequireJS做包管理，开始用AngularJS来做一些可以重用的View，在后来ReactJS流行后，边逐步改成ReactJs。我只能说，这个博客还是在初级阶段，我一直努力写一些有营养的文章，无奈目前能力所限，只能在今后的一年里更加努力。</p>
<h3 id="2015-读书，-读好书"><a href="#2015-读书，-读好书" class="headerlink" title="2015 读书， 读好书"></a>2015 读书， 读好书</h3><p>书籍是人类进步的阶梯。2015前半年零零散散读了些小说散文：</p>
<ul>
<li><p>看了刘慈溪的《三体》，很是佩服作者的想象力，不过感觉和欧美更加硬核的科幻比起来，《三体》的逻辑性还有待提高。</p>
</li>
<li><p>2015看的最好的一本是是Greg McKeown的《Essentialism》，这本书从人们日常学习工作的一些常见的行为入手，分析了为什么有些人很忙却没有什么收货，有些人却可以有四两拨千斤的功力。关键在于学会说”不“，学会选择，学会规划，窃以为沉陷于职场中的每个人都应该好好读读那么书。</p>
</li>
<li><p>Barbara　Sher的《Refuse to Choose》。我只仔细读了前半部分，作者讲了另外一种人——Scanner，这类人的特点是1）好奇心重，喜欢学习任何可以学习的东西；2）喜欢同时做很多事情；3）很容易对反复做同样的事情感到厌倦；4）不喜欢深入研究某个技能，往往半途而费。看了这本书，觉得完全是在总结我的特点。作者给了一些建议，比如把所有想做的事情写下来，固定时间选一项做。或者不要有心里压力，半途而费也没什么，因为很多东西只是为了满足Scanner学习的欲望。</p>
</li>
<li><p>Malcolm Gladwell的Outliers。这本书给人耳目一新的感觉，作者以日常的一些想象入手。比如为什么好的橄榄球运动员大多出生在一月到三月？为什么Bill Gates, Steve Jobs或者Bill Joy能够那么成功，究竟是一万小时定律还是有别的原因？为什么不同地方的人有不同的行为？</p>
</li>
<li><p>Ta-Nehisi Coates的《Between the world and me》最近的畅销书，不做评论。</p>
</li>
<li><p>Robin Cook的《Nano》，感觉一般，觉得这种大众“畅销书作者写书有一种套路，比如Nichlas Sparks或者John Grisham等等，他们的书Plot都很类似，只是换了人物和地点，所以随便看一辆本评价不错的也就可以了。</p>
</li>
<li><p>Ayaan Hirsi Ali的《Herectic》希望了解穆斯林的都应该读读，作者本来严格信封伊斯兰教，但是后来放弃了这个宗教，整本书仔细剖析了伊斯兰教成形成，和其他宗教的区别以及现代恐怖主义的成因。</p>
</li>
</ul>
<p>在读的其他书也有很多，以后有机会再一一写下吧。</p>
<p>其他技术类的也看了一些</p>
<ul>
<li><p>Javascript Ninja，强烈推荐的一本书，虽然新的ES6开始广泛应用，书里有些技巧用不到了，但是还是可以通过看这本书来体会到Javascript的博大精深。</p>
</li>
<li><p>深入浅出Nodejs，国内大神的一本讲Node的书，国外买不到只好找来PDF打印，和网路上大部分Node教程不同，这本书的特点就是深， 详尽，有些东西比如用C++写Node模块估计一般人也不大会用到，但是非常感谢作者提到这些，这本书作为参考书或者学习用书都是再合适不过了。</p>
</li>
</ul>
<p>其他很多技术书还一直在读，因为我不喜欢读完一本书再去实现，而是喜欢先实现，再翻翻书，再实现，再翻书，直到把整本书都看完，所谓技术书读的会比较慢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我在写这个开头的时候，脑中跳出的头一句是：“2015是变革的一年，是发展的一年，是丰收的一年”。可以是觉得有点写思想汇报即视感，于是作罢。&lt;br&gt;想要写点什么新奇的东西，可以又觉得任凭我怎么总结2015都会有所疏漏，因而作此文不为总结，只为留下些东西，权作日后的参考。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Essay" scheme="https://evertqin.github.io/blog/tags/Essay/"/>
    
  </entry>
  
  <entry>
    <title>Making a Ajax file structure browser with ReactJs Flux Pattern</title>
    <link href="https://evertqin.github.io/blog/2015/12/16/post28/"/>
    <id>https://evertqin.github.io/blog/2015/12/16/post28/</id>
    <published>2015-12-16T05:00:00.000Z</published>
    <updated>2017-06-23T21:44:12.174Z</updated>
    
    <content type="html"><![CDATA[<p>Consider the following scenario, we are creating a set of dropdowns each displays a series folders in a file system. User will click a dropdown to view all the folders (or files), then make a selection. After selection is made, all the dropdowns following the one user interacted with will change to show the subfolders (or files, if there are any) in the folder the user has selected.</p>
<a id="more"></a>
<p>An apparent solution to that scenario is by using an cascading event structure. The figure below demonstrate this simple structure:</p>
<p><img src="http://i.imgur.com/rMInLfF.jpg=242x455" alt="Demo"></p>
<p>From the figure, we can see a change event from the controls higher in the hierarchy triggers data change in the control lower in the hierarchy, which will then triggers the change of its lower hierarchical controls. This process will continue until there is no more downstream controls. There are nothing wrong with this approach, since it is very straightforward and simple. We essentially chain a unidirectional events together.</p>
<p>Does “unidirectional” ring a bell? Yes, we keep this word in heart when we are practicing <a href="https://facebook.github.io/flux/docs/overview.html" target="_blank" rel="external">Flux Pattern</a>. The different is, in flux, it emchews a MVC pattern, ReactJS views are actually view-controllers whose responsiblities include retrieving data from stores and propagate them to children. Actions are usually user interactions with the views and they are propagated to the dispatchers who execute callbacks registered to that action to interact with corresponding store(s).</p>
<p>My initial reaction is: we can use Flux pattern to create this structure, we can fit our scenario perfectly into Flux pattern. The following figures shows the modified Flux structure.</p>
<p><img src="/home/ruogu/projects/RogerBlog/post/post28/figure2.png" alt="Modified Flux"></p>
<p>Data flow is no different from the standard Flux. My change is: instead of creating separate store and view from different options, the stores can be derived from a single base store. If we are storing data of similar format, we event don’t need to create separate store, we can just use the base store directly. </p>
<p>The views are derived from a single base view, and to achieve the chaining, instead of binding event listeners, we do this by class inheritance. For example, view0 has a method _onChange which does some ajax requests to fetch fresh data. View1 will inherit everything from view0 (which has everything already setup), and bind its own event handler to the events emitter of view0, such as <code>var BaseComponent = require(&#39;./AppComponent1&#39;);</code>(You will see this in <a href="#create-reactjs-components">Create ReactJs Components</a>)</p>
<p>First everything I am doing here can be found on my GitHub (<a href="https://github.com/evertqin/flux-reactjs-chain-reactions" target="_blank" rel="external">https://github.com/evertqin/flux-reactjs-chain-reactions</a>). To run the demo, checkout everything then run</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>
<p>then<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm start</div></pre></td></tr></table></figure></p>
<p>then navigate to <code>http://localhost:3000</code> to see the result.</p>
<p>To start from scratch, make sure you have nodejs installed, for demo purpose, I am using express to generate web scaffold, feel free to choose other types of frameworks as long as it is able to provide endpoints that is capable of returning JSON.</p>
<h1 id="Setup-backend-services"><a href="#Setup-backend-services" class="headerlink" title="Setup backend services"></a>Setup backend services</h1><h4 id="Install-Express-and-scaffoldding-the-web-application"><a href="#Install-Express-and-scaffoldding-the-web-application" class="headerlink" title="Install Express and scaffoldding the web application."></a>Install Express and scaffoldding the web application.</h4><p>First make sure express generator is installed:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install express-generator -g</div></pre></td></tr></table></figure>
<p>Then type</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">express myapp</div></pre></td></tr></table></figure>
<p>Replace “myapp” with the the name of your app.</p>
<p>You also need to add some dependencies to <code>package.json</code> besides those added by express. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> &quot;name&quot;: &quot;nodejs-react-flux&quot;,</div><div class="line"> &quot;version&quot;: &quot;0.0.0&quot;,</div><div class="line"> &quot;private&quot;: true,</div><div class="line"> &quot;scripts&quot;: &#123;</div><div class="line">  &quot;start&quot;: &quot;node ./bin/www&quot;,</div><div class="line">  &quot;build&quot;: &quot;grunt&quot;,</div><div class="line">  &quot;test&quot;: &quot;jest&quot;</div><div class="line"> &#125;,</div><div class="line"> &quot;dependencies&quot;: &#123;</div><div class="line">  &quot;body-parser&quot;: &quot;~1.13.2&quot;,</div><div class="line">  &quot;cookie-parser&quot;: &quot;~1.3.5&quot;,</div><div class="line">  &quot;debug&quot;: &quot;~2.2.0&quot;,</div><div class="line">  &quot;express&quot;: &quot;~4.13.1&quot;,</div><div class="line">  &quot;jade&quot;: &quot;~1.11.0&quot;,</div><div class="line">  &quot;morgan&quot;: &quot;~1.6.1&quot;,</div><div class="line">  &quot;serve-favicon&quot;: &quot;~2.3.0&quot;,</div><div class="line">  &quot;flux&quot;: &quot;^2.1.1&quot;,</div><div class="line">  &quot;grunt&quot;: &quot;^0.4.5&quot;,</div><div class="line">  &quot;jquery&quot;: &quot;^2.1.4&quot;,</div><div class="line">  &quot;keymirror&quot;: &quot;^0.1.1&quot;,</div><div class="line">  &quot;object-assign&quot;: &quot;^4.0.1&quot;,</div><div class="line">  &quot;object-is&quot;: &quot;^1.0.1&quot;</div><div class="line"> &#125;,</div><div class="line"> &quot;devDependencies&quot;: &#123;</div><div class="line">  &quot;babel-preset-es2015&quot;: &quot;^6.3.13&quot;,</div><div class="line">  &quot;babel-preset-react&quot;: &quot;^6.1.18&quot;,</div><div class="line">  &quot;babelify&quot;: &quot;^7.2.0&quot;,</div><div class="line">  &quot;browserify&quot;: &quot;^12.0.1&quot;,</div><div class="line">  &quot;grunt-browserify&quot;: &quot;^4.0.1&quot;,</div><div class="line">  &quot;grunt-contrib-sass&quot;: &quot;^0.9.2&quot;,</div><div class="line">  &quot;grunt-contrib-watch&quot;: &quot;^0.6.1&quot;,</div><div class="line">  &quot;grunt-react&quot;: &quot;^0.12.3&quot;,</div><div class="line">  &quot;jest-cli&quot;: &quot;^0.8.2&quot;,</div><div class="line">  &quot;babel-jest&quot;: &quot;*&quot;,</div><div class="line">  &quot;react&quot;: &quot;^0.14.3&quot;,</div><div class="line">  &quot;react-dom&quot;: &quot;^0.14.3&quot;</div><div class="line"> &#125;,</div><div class="line"> &quot;jest&quot;: &#123;</div><div class="line">  &quot;modulePathIgnorePatterns&quot;: [</div><div class="line">   &quot;/node_modules/&quot;</div><div class="line">  ],</div><div class="line">  &quot;rootDir&quot;: &quot;&quot;,</div><div class="line">  &quot;scriptPreprocessor&quot;: &quot;&lt;rootDir&gt;/node_modules/babel-jest&quot;,</div><div class="line">  &quot;testFileExtensions&quot;: [&quot;es6&quot;, &quot;js&quot;],</div><div class="line">  &quot;moduleFileExtensions&quot;: [&quot;jsx&quot;,&quot;js&quot;, &quot;json&quot;, &quot;es6&quot;],</div><div class="line">   &quot;testPathDirs&quot;: [</div><div class="line">   &quot;&lt;rootDir&gt;/public/js&quot;</div><div class="line">  ],</div><div class="line">  &quot;unmockedModulePathPatterns&quot;: [</div><div class="line">   &quot;&lt;rootDir&gt;/node_modules/react&quot;,</div><div class="line">   &quot;&lt;rootDir&gt;/node_modules/react-dom&quot;,</div><div class="line">   &quot;&lt;rootDir&gt;/node_modules/react-addons-test-utils&quot;,</div><div class="line">   &quot;&lt;rootDir&gt;/node_modules/fbjs&quot;</div><div class="line">  ]</div><div class="line"> &#125;,</div><div class="line"> &quot;author&quot;: &quot;Ruogu Qin&quot;,</div><div class="line"> &quot;license&quot;: &quot;MIT&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The file can also be found on my GitHub (<a href="https://github.com/evertqin/flux-reactjs-chain-reactions/blob/master/package.json" target="_blank" rel="external">https://github.com/evertqin/flux-reactjs-chain-reactions/blob/master/package.json</a>).</p>
<p>After adding necessary dependencies, run <code>npm install</code>.</p>
<h4 id="Setup-grunt-for-automation"><a href="#Setup-grunt-for-automation" class="headerlink" title="Setup grunt for automation."></a>Setup grunt for automation.</h4><p>I used browserify to compile js/jsx/es6 files, I also used jest(which is the default testing framework provided in official flux example)</p>
<p>Install grunt by typing:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install grunt-cli -g</div></pre></td></tr></table></figure>
<p>Modify the <code>gruntfile.js</code> according to <a href="https://github.com/evertqin/flux-reactjs-chain-reactions/blob/master/gruntfile.js" target="_blank" rel="external">https://github.com/evertqin/flux-reactjs-chain-reactions/blob/master/gruntfile.js</a>, </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">This file in the main entry point for defining grunt tasks and using grunt plugins.</div><div class="line">Click here to learn more. http://go.microsoft.com/fwlink/?LinkID=513275&amp;clcid=0x409</div><div class="line">*/</div><div class="line">module.exports = function(grunt) &#123;</div><div class="line">  grunt.initConfig(&#123;</div><div class="line">  pkg: grunt.file.readJSON(&apos;package.json&apos;),</div><div class="line">  </div><div class="line">  browserify: &#123;</div><div class="line">   dist: &#123;</div><div class="line">       options: &#123;</div><div class="line">          transform: [</div><div class="line">            [&quot;babelify&quot;, &#123;</div><div class="line">              presets: [&quot;react&quot;, &quot;es2015&quot;]</div><div class="line">            &#125;]</div><div class="line">          ],</div><div class="line">          noParse: [&quot;~/node_modules/jquery/**/*&quot;, &quot;~/node_modules/react/**/*&quot;, &quot;~/node_modules/react-dom/**/*&quot;],</div><div class="line">          browserifyOptions: &#123;</div><div class="line">            debug: true</div><div class="line">          &#125;</div><div class="line">        &#125;,</div><div class="line">        files: &#123;</div><div class="line">          &quot;public/build/js/app-bundle.js&quot;: [&quot;public/js/app.jsx&quot;]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    sass: &#123;</div><div class="line">      dynamic_mapping: &#123;</div><div class="line">        files: [&#123;</div><div class="line">          expand: true,</div><div class="line">          cwd: &apos;public/stylesheets&apos;,</div><div class="line">          src: [&apos;*.scss&apos;],</div><div class="line">          dest: &apos;public/build/stylesheets&apos;,</div><div class="line">          ext: &apos;.css&apos;,</div><div class="line">        &#125;]</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    watch: &#123;</div><div class="line">      js: &#123;</div><div class="line">        files: [&quot;public/js/**/*.jsx&quot;, &quot;public/js/**/*.js&quot;, &quot;!public/build/**/*&quot;, &quot;!public/js/**/__tests__/*&quot;],</div><div class="line">        tasks: [&quot;browserify&quot;]</div><div class="line">      &#125;,</div><div class="line">      css: &#123;</div><div class="line">        files:[&quot;public/stylesheets/**/*.scss&quot;],</div><div class="line">        tasks: [&quot;sass&quot;]</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  grunt.registerTask(&apos;default&apos;, [&apos;watch&apos;]);</div><div class="line">  grunt.registerTask(&apos;build&apos;, [&apos;browserify&apos;, &apos;sass&apos;]);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-sass&apos;);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-browserify&apos;);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-watch&apos;);</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>the default task is registed as watch, you can build your browserify bundle by typing <code>grunt build</code>.</p>
<h4 id="Add-routes"><a href="#Add-routes" class="headerlink" title="Add routes"></a>Add routes</h4><p>I add three endpoints to the express router. Because I want to demonstrate populating three dropdowns, so each of these endpoints returns an array in JSON format. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">var express = require(&apos;express&apos;);</div><div class="line">var url = require(&apos;url&apos;);</div><div class="line">var querystring = require(&apos;querystring&apos;);</div><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line">var path = require(&apos;path&apos;);</div><div class="line">var router = express.Router();</div><div class="line">var HOME = process.env[(process.platform == &apos;win32&apos;) ? &apos;USERPROFILE&apos; : &apos;HOME&apos;];</div><div class="line"></div><div class="line">/* GET home page. */</div><div class="line"></div><div class="line">router.get(&apos;/&apos;, function(req, res) &#123;</div><div class="line"> res.render(&apos;index&apos;, &#123;</div><div class="line">  title: &apos;Express&apos;</div><div class="line"> &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">router.get(&apos;/Analysis/root&apos;, function(req, res, next) &#123;</div><div class="line"> fs.readdir(HOME, function(err, files) &#123;</div><div class="line">  if (err) &#123;</div><div class="line">   res.send([]);</div><div class="line">   return;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  if (files) &#123;</div><div class="line">   files = files.filter(function(item) &#123;</div><div class="line">    return fs.lstatSync(path.join(HOME, item)).isDirectory();</div><div class="line">   &#125;);</div><div class="line">   res.send(files);</div><div class="line">  &#125; else &#123;</div><div class="line">   res.send([]);</div><div class="line">  &#125;</div><div class="line"> &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">router.get(&apos;/Analysis/level0&apos;, function(req, res, next) &#123;</div><div class="line"> var selected = req.query.root;</div><div class="line"> fs.readdir(path.join(HOME, selected), function(err, files) &#123;</div><div class="line">  if (err) &#123;</div><div class="line">   res.send([]);</div><div class="line">   return;</div><div class="line">  &#125;</div><div class="line">  if (files) &#123;</div><div class="line">   files = files.filter(function(item) &#123;</div><div class="line">    return fs.lstatSync(path.join(HOME, selected, item)).isDirectory();</div><div class="line">   &#125;);</div><div class="line">   res.send(files);</div><div class="line">  &#125; else &#123;</div><div class="line">   res.send([]);</div><div class="line">  &#125;</div><div class="line"> &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">router.get(&apos;/Analysis/level1&apos;, function(req, res, next) &#123;</div><div class="line"> var root = req.query.root;</div><div class="line"> var level0 = req.query.level0;</div><div class="line"></div><div class="line"> fs.readdir(path.join(HOME, root, level0), function(err, files) &#123;</div><div class="line">  if (err) &#123;</div><div class="line">   res.send([]);</div><div class="line">  &#125; else &#123;</div><div class="line">   res.send(files);</div><div class="line">  &#125;</div><div class="line"> &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">module.exports = router;</div></pre></td></tr></table></figure>
<p>Please check the file on GitHub (<a href="https://github.com/evertqin/flux-reactjs-chain-reactions/blob/master/routes/index.js" target="_blank" rel="external">https://github.com/evertqin/flux-reactjs-chain-reactions/blob/master/routes/index.js</a>).</p>
<p>Now we have created all the backend services we need, we can try to test it here. Navigate to the root directory of “myapp” then type <code>npm start</code>. It everything is correct, you should see Express Hello world page.</p>
<h1 id="Setup-flux-and-reactjs"><a href="#Setup-flux-and-reactjs" class="headerlink" title="Setup flux and reactjs"></a>Setup flux and reactjs</h1><p>Next, we are moving to creating frontend code. It is important to setup folder structures for your ReactJs and flux application, the resultant directory tree should be more or less like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">myapp</div><div class="line">|-actions</div><div class="line">|-components</div><div class="line">|-configs</div><div class="line">|-constants</div><div class="line">|-dispatcher</div><div class="line">|-stores</div><div class="line">|-utils</div></pre></td></tr></table></figure>
<h2 id="Setup-dispatcher"><a href="#Setup-dispatcher" class="headerlink" title="Setup dispatcher"></a>Setup dispatcher</h2><p>Since we are not making any customize modification for now, I using the default dispatcher.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var Dispatcher = require(&apos;flux&apos;).Dispatcher;</div><div class="line">module.exports = new Dispatcher();</div></pre></td></tr></table></figure>
<p><a href="https://facebook.github.io/flux/docs/todo-list.html#creating-a-dispatcher" target="_blank" rel="external">Flux ToDo List Tutorial</a> gives more detailed insight about the dispatcher.</p>
<h2 id="Create-Actions"><a href="#Create-Actions" class="headerlink" title="Create Actions"></a>Create Actions</h2><p>Depends on the type of the actions, the approperate dispatcher is called to trigger the invocation of a registered callback. I generalize this part assuming our application is doing one thing, getting an action type, wait for all the upstream actions to finish, then broadcast this action as event.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var AppDispatcher = require(&apos;../dispatcher/AppDispatcher&apos;);</div><div class="line">var Constants = require(&apos;../constants/constants&apos;);</div><div class="line">var ActionTypes = require(&apos;./Actions&apos;);</div><div class="line"></div><div class="line">var Actions = &#123;</div><div class="line">	excute: function(actionType, value) &#123;</div><div class="line">		AppDispatcher.dispatch(&#123;</div><div class="line">			actionType: actionType,</div><div class="line">			value: value,</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = Actions;</div></pre></td></tr></table></figure>
<h2 id="Setup-stores"><a href="#Setup-stores" class="headerlink" title="Setup stores"></a>Setup stores</h2><p>Instead of creating one store for each of the component (which is how the official tutorial do it). I am generalizing stores and use a store manager to manage data and events for all the stores. A store config file is used to tell the store manager what stores will be initialized and how they are initialized.</p>
<p>The following <code>Config.js</code> is located under configs folder<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">var Config = [&#123;</div><div class="line">	name: &apos;AppComponent0&apos;,</div><div class="line">	class: require(&apos;../stores/Store&apos;),</div><div class="line">&#125;, &#123;</div><div class="line">	name: &apos;AppComponent1&apos;,</div><div class="line">	class: require(&apos;../stores/Store&apos;),</div><div class="line">&#125;,&#123;</div><div class="line">	name: &apos;AppComponent2&apos;,</div><div class="line">	class: require(&apos;../stores/Store&apos;),</div><div class="line">&#125; ];</div><div class="line"></div><div class="line">module.exports = Config;</div></pre></td></tr></table></figure></p>
<p>Storemanager will read the above file and populate an array of store object:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">&quot;use strict&quot;;</div><div class="line"></div><div class="line">var AppDispatcher = require(&apos;../dispatcher/AppDispatcher&apos;);</div><div class="line">var storesConfig = require(&apos;../configs/Config&apos;);</div><div class="line"></div><div class="line">class StoresManager &#123;</div><div class="line">	constructor() &#123;</div><div class="line">		this._stores = &#123;&#125;;</div><div class="line">		this._order = [];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	add(store) &#123;</div><div class="line">		if (!!store) &#123;</div><div class="line">			if (!(store in this._stores)) &#123;</div><div class="line">				this._stores[store.name] = store;</div><div class="line">				this._order.push(store);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		// we need to handle all the previous stores</div><div class="line">		store.dispatchToken = AppDispatcher.register(function(payload) &#123;</div><div class="line">			var index = -1;</div><div class="line">			for(var i = 0; i &lt; this._order.length; ++i)&#123;</div><div class="line">				if(this._order[i].name === payload.actionType)&#123;</div><div class="line">					index = i;</div><div class="line">					break;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			var storeIndex = this._order.indexOf(store);</div><div class="line"></div><div class="line">			if(index &gt; storeIndex)&#123;</div><div class="line">				// higher hirachy actions will not cause any change in the lower </div><div class="line">				// hirachy stores</div><div class="line">				return;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			var pre = this._order.slice(0, index);</div><div class="line"></div><div class="line">			AppDispatcher.waitFor(pre.map(s=&gt;&#123;return s.dispatchToken;&#125;));</div><div class="line">			store.dispatch(payload);	</div><div class="line">			store.emitChange();</div><div class="line">		&#125;.bind(this));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	remove(store) &#123;</div><div class="line">		var index = this._order.indexOf(store.name);</div><div class="line"></div><div class="line">		if (index &gt; -1) &#123;</div><div class="line">			this._stores.splice(index, 1);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		if (store.name in this._stores) &#123;</div><div class="line">			delete this._stores[store.name];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	get allStores() &#123;</div><div class="line">		return this._order;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	getStoreState(name) &#123;</div><div class="line">		return this._stores[name].state;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	addListener(name, callback) &#123;</div><div class="line">		var store = this._stores[name];</div><div class="line"></div><div class="line">		if(store)&#123;</div><div class="line">			store.addChangeListener(callback);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	removeListener(name, callback)&#123;</div><div class="line">		var store = this._stores[name];</div><div class="line"></div><div class="line">		if(store)&#123;</div><div class="line">			store.removeChangeListener(callback);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	printAllStores() &#123;</div><div class="line">		console.log(this._stores);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	static init() &#123;</div><div class="line">		var storesManager = new StoresManager();</div><div class="line"></div><div class="line">		for(var i = 0; i &lt; storesConfig.length; ++i)&#123;</div><div class="line">			var store = new storesConfig[i].class(storesConfig[i].name);</div><div class="line">			storesManager.add(store);</div><div class="line">		&#125;</div><div class="line">		return storesManager;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = StoresManager.init();</div></pre></td></tr></table></figure>
<p>Stores are added to the manager by the order they are specified in the config file and this order reflects the dependency among dropdowns. So in this case, AppComponent2 will depend on AppComponent1 which depends on AppComponent0. These stores are added to the manager in such as way that when a new store is added to the end of this hierarchy, it will register itself to the dispatcher and waitFor all the upstream stores to finish their excusion.</p>
<p>Single stores generally follow the same pattern, I created a generic <code>Store</code> class. Specific stores can be created by subclassing this one or by their own.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">var EventEmitter = require(&apos;events&apos;).EventEmitter;</div><div class="line"></div><div class="line">class Store extends EventEmitter &#123;</div><div class="line">	constructor(name) &#123;</div><div class="line">		super();</div><div class="line"></div><div class="line">		if (!name) &#123;</div><div class="line">			throw new TypeError(&apos;You must provide the name of the store&apos;);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		this.name = name ? name : &apos;Store&apos;;</div><div class="line">		this.state = &#123;</div><div class="line">			list: [&apos;Universal&apos;],</div><div class="line">      selected: &apos;Universal&apos;</div><div class="line">		&#125;;</div><div class="line">		this.dispatchToken = &#123;&#125;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	update(value)&#123;</div><div class="line">		console.log(&quot;Updating &quot; + value);</div><div class="line">		for(let tag in value)&#123;</div><div class="line">			if(value.hasOwnProperty(tag))&#123;</div><div class="line">				this.state[tag] = value[tag];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	dispatch(action) &#123;</div><div class="line">		console.log(&quot;Dispatching \&quot;&quot; + this.name + &quot;\&quot;.&quot; );</div><div class="line">		if(!Object.is(action.value, this.state)) &#123;</div><div class="line">			this.update(action.value);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	emitChange() &#123;</div><div class="line">		console.log(&quot;Emitting &quot; + this.name);</div><div class="line">		super.emit(this.name);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	addChangeListener(callback) &#123;</div><div class="line">		super.on(this.name, callback);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	removeChangeListener(callback) &#123;</div><div class="line">		super.removeListener(this.name, callback);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = Store;</div></pre></td></tr></table></figure>
<h2 id="Create-ReactJs-Components"><a href="#Create-ReactJs-Components" class="headerlink" title="Create ReactJs Components"></a><a name="create-reactjs-components"></a>Create ReactJs Components</h2><p>This is the key part, to get the application running, we need to create ReactJs UI component. We start with a base component.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">var React = require(&apos;react&apos;);</div><div class="line">var StoresManager = require(&apos;../stores/StoresManager&apos;);</div><div class="line">var Actions = require(&apos;../actions/Actions&apos;);</div><div class="line">var UserControls = require(&apos;./UserControls.jsx&apos;);</div><div class="line">var utils = require(&apos;../utils/AjaxUtils&apos;);</div><div class="line"></div><div class="line">var ajaxGet = utils.ajaxGet;</div><div class="line"></div><div class="line">class BaseComponent extends React.Component &#123;</div><div class="line">	constructor(props) &#123;</div><div class="line">		super(props);</div><div class="line">		this.state = StoresManager.getStoreState(props.name);</div><div class="line">		// we need to manually bind this to custom methods</div><div class="line">		//https://github.com/goatslacker/alt/issues/283</div><div class="line">		this._onChange = this._onChange.bind(this);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	componentDidMount() &#123;</div><div class="line">		console.log(&quot;calling base componentDidMount&quot;);</div><div class="line">		ajaxGet.call(this, this.props.url, &#123;&#125;).then(this._onChange);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	componentWillUnmount() &#123;</div><div class="line">		// AnalysisInputStores.removeChangeListener(this._onChange);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	_onChange(value) &#123;</div><div class="line">		Actions.excute(this.props.name, value);</div><div class="line">		this.setState(StoresManager.getStoreState(this.props.name));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	render() &#123;</div><div class="line">		return React.createElement(UserControls.AnalysisDropDown, &#123;</div><div class="line">			dataSource: this.state.list,</div><div class="line">			selected: this.state.selected,</div><div class="line">			selectChange: this._onChange</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">BaseComponent.propTypes = &#123;</div><div class="line">	name: React.PropTypes.string.isRequired,</div><div class="line">	url: React.PropTypes.string.isRequired</div><div class="line">&#125;;</div><div class="line"></div><div class="line">BaseComponent.defaultProps = &#123;</div><div class="line">	name: &apos;BaseComponent&apos;, // change this</div><div class="line">	url: &apos;/Analysis/root&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = BaseComponent;</div></pre></td></tr></table></figure>
<p>The initial data is populated by doing an ajax request to the backend. Then the _onChange event is triggered so the internal state of this component and that stored in its corresponding store are synced.</p>
<p>For the rest of the components, we just need to subclass its predecessors (which is the component lower in the hierarchy), and provide a customized event handler as shown below:</p>
<p>For example, for the first component (<code>AppComponent0</code>):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">var React = require(&apos;react&apos;);</div><div class="line">var StoresManager = require(&apos;../stores/StoresManager&apos;);</div><div class="line">var Actions = require(&apos;../actions/Actions&apos;);</div><div class="line">var UserControls = require(&apos;./UserControls.jsx&apos;);</div><div class="line">var BaseComponent = require(&apos;./BaseComponent&apos;);</div><div class="line">var utils = require(&apos;../utils/AjaxUtils&apos;);</div><div class="line"></div><div class="line">var ajaxGet = utils.ajaxGet;</div><div class="line"></div><div class="line">class AppComponent0 extends BaseComponent &#123;</div><div class="line">	constructor(props) &#123;</div><div class="line">		super(props);</div><div class="line">		this.state = StoresManager.getStoreState(props.name);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	render() &#123;</div><div class="line">		return React.createElement(UserControls.AnalysisDropDown, &#123;</div><div class="line">			dataSource: this.state.list,</div><div class="line">			selected: this.state.selected,</div><div class="line">			selectChange: this._onChange</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppComponent0.propTypes = &#123;</div><div class="line">	name: React.PropTypes.string.isRequired,</div><div class="line">	url: React.PropTypes.string.isRequired</div><div class="line">&#125;;</div><div class="line"></div><div class="line">AppComponent0.defaultProps = &#123;</div><div class="line">	name: &apos;AppComponent0&apos;, // change this</div><div class="line">	url: &apos;/Analysis/root&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = AppComponent0;</div></pre></td></tr></table></figure>
<p>for the second component (<code>AppComponent1</code>):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">var React = require(&apos;react&apos;);</div><div class="line">var StoresManager = require(&apos;../stores/StoresManager&apos;);</div><div class="line">var Actions = require(&apos;../actions/Actions&apos;);</div><div class="line">var UserControls = require(&apos;./UserControls.jsx&apos;);</div><div class="line">var BaseComponent = require(&apos;./AppComponent0&apos;);</div><div class="line">var utils = require(&apos;../utils/AjaxUtils&apos;);</div><div class="line"></div><div class="line">var ajaxGet = utils.ajaxGet;</div><div class="line"></div><div class="line">class AppComponent1 extends BaseComponent &#123;</div><div class="line">	constructor(props) &#123;</div><div class="line">		super(props);</div><div class="line">		this.state = StoresManager.getStoreState(props.name);</div><div class="line">		// we need to manually bind this to custom methods</div><div class="line">		//https://github.com/goatslacker/alt/issues/283</div><div class="line">		this._onRootChange = this._onRootChange.bind(this);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	componentDidMount() &#123;</div><div class="line">		//Here should attach event listener to upstream store</div><div class="line">		StoresManager.addListener(BaseComponent.name, this._onRootChange);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	componentWillUnmount() &#123;</div><div class="line">		StoresManager.removeListener(BaseComponent.name, this._onRootChange);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	_onRootChange() &#123;</div><div class="line">		ajaxGet.call(this, this.props.url, &#123;</div><div class="line">			root: StoresManager.getStoreState(BaseComponent.name).selected</div><div class="line">		&#125;).then(this._onChange);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	render() &#123;</div><div class="line">		return React.createElement(UserControls.AnalysisDropDown, &#123;</div><div class="line">			dataSource: this.state.list,</div><div class="line">			selected: this.state.selected,</div><div class="line">			selectChange: this._onChange</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppComponent1.propTypes = &#123;</div><div class="line">	name: React.PropTypes.string.isRequired,</div><div class="line">	root: React.PropTypes.string.isRequired,</div><div class="line">	url: React.PropTypes.string.isRequired</div><div class="line">&#125;;</div><div class="line"></div><div class="line">AppComponent1.defaultProps = &#123;</div><div class="line">	name: &apos;AppComponent1&apos;, // change this</div><div class="line">	root: &apos;.android&apos;,</div><div class="line">	url: &apos;/Analysis/level0&apos;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = AppComponent1;</div></pre></td></tr></table></figure></p>
<p>And et cetera… to create more component in the chain, just inherit, add own event handler then register the event handler to lower hierarchical control’s event emitter, and that’s it!</p>
<p>Refer to <a href="https://github.com/evertqin/flux-reactjs-chain-reactions/tree/master/public/js/components" target="_blank" rel="external">https://github.com/evertqin/flux-reactjs-chain-reactions/tree/master/public/js/components</a> for other components necessary for creating this application.</p>
<p>Finally, compile the js with <code>npm build</code>, then you can check the result with <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a></p>
<p>The result should look like this:</p>
<p><img src="http://i.imgur.com/iYVvuxh.gif" alt="Display Grid"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Consider the following scenario, we are creating a set of dropdowns each displays a series folders in a file system. User will click a dropdown to view all the folders (or files), then make a selection. After selection is made, all the dropdowns following the one user interacted with will change to show the subfolders (or files, if there are any) in the folder the user has selected.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="Javascript" scheme="https://evertqin.github.io/blog/tags/Javascript/"/>
    
      <category term="ReactJS" scheme="https://evertqin.github.io/blog/tags/ReactJS/"/>
    
      <category term="Flux" scheme="https://evertqin.github.io/blog/tags/Flux/"/>
    
  </entry>
  
  <entry>
    <title>How to setup ReactJS dev enviornment with Browserify, Babel and grunt</title>
    <link href="https://evertqin.github.io/blog/2015/11/24/post27/"/>
    <id>https://evertqin.github.io/blog/2015/11/24/post27/</id>
    <published>2015-11-24T05:00:00.000Z</published>
    <updated>2017-06-23T21:43:50.030Z</updated>
    
    <content type="html"><![CDATA[<p>Major change has been made to ReactJS: JSXTransformer was deprecated, <a href="https://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="external">Babel with Browserify</a> is now the recommended way to transcribe the jsx files. I am documenting the setup process hoping it will be helpful in the future.</p>
<a id="more"></a>
<ol>
<li><p>Setup project folder</p>
<ul>
<li>nodejs is required, as well as npm because all of our packages depends on it.</li>
<li>cd into project folder, and run:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Install Required Software      </p>
<ul>
<li><p>Run the following command anywhere to install browserify as a global node_module</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g browserify</div></pre></td></tr></table></figure>
</li>
<li><p>Install ReactJS related npm packages by running</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save react react-dom</div></pre></td></tr></table></figure>
</li>
<li><p>Install Babel related modules</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save babelify babel-preset-reactbabel-preset-react</div></pre></td></tr></table></figure>
</li>
<li><p>Install grunt and its modules. First grunt client is required:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g grunt-cli</div></pre></td></tr></table></figure>
<p>Then install grunt and some modules</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev grunt grunt-contrib-uglify grunt-contrib-clean grunt-babel babel-preset-es2015 grunt-contrib-watch grunt-browserify</div></pre></td></tr></table></figure>
</li>
<li><p>Optional grunt package(s)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev grunt-env</div></pre></td></tr></table></figure>
</li>
</ul>
<p>The final package.json file under the project folder should look resemble following:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;react-editor&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;This is the text editor using reactjs&quot;,</div><div class="line">  &quot;main&quot;: &quot;index.js&quot;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;babel-preset-react&quot;: &quot;^6.1.18&quot;,</div><div class="line">    &quot;babelify&quot;: &quot;^7.2.0&quot;,</div><div class="line">    &quot;install&quot;: &quot;^0.3.0&quot;,</div><div class="line">    &quot;npm&quot;: &quot;^3.4.1&quot;,</div><div class="line">    &quot;react&quot;: &quot;^0.14.3&quot;,</div><div class="line">    &quot;react-dom&quot;: &quot;^0.14.3&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line">    &quot;babel-plugin-uglify&quot;: &quot;^1.0.2&quot;,</div><div class="line">    &quot;babel-preset-es2015&quot;: &quot;^6.1.18&quot;,</div><div class="line">    &quot;grunt&quot;: &quot;^0.4.5&quot;,</div><div class="line">    &quot;grunt-babel&quot;: &quot;^6.0.0&quot;,</div><div class="line">    &quot;grunt-browserify&quot;: &quot;^4.0.1&quot;,</div><div class="line">    &quot;grunt-contrib-clean&quot;: &quot;^0.7.0&quot;,</div><div class="line">    &quot;grunt-contrib-uglify&quot;: &quot;^0.11.0&quot;,</div><div class="line">    &quot;grunt-contrib-watch&quot;: &quot;^0.6.1&quot;,</div><div class="line">    &quot;grunt-env&quot;: &quot;^0.4.4&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;keywords&quot;: [</div><div class="line">    &quot;react&quot;,</div><div class="line">    &quot;editor&quot;,</div><div class="line">    &quot;blog&quot;</div><div class="line">  ],</div><div class="line">  &quot;author&quot;: &quot;Ruogu Qin&quot;,</div><div class="line">  &quot;license&quot;: &quot;MIT&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Okay, now you are all set to go to the next step.</p>
</li>
<li><p>setup grunt config file Gruntfile.js under your project root</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">module.exports = function(grunt) &#123;</div><div class="line">grunt.initConfig(&#123;</div><div class="line">  pkg: grunt.file.readJSON(&apos;package.json&apos;),</div><div class="line">  clean:[&apos;public/build&apos;],</div><div class="line">  env: &#123;</div><div class="line">    build: &#123;</div><div class="line">      NODE_ENV: &apos;production&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  browserify: &#123;</div><div class="line">    dev: &#123;</div><div class="line">      files:&#123;</div><div class="line">        &apos;public/build/js/main.js&apos;:[&apos;public/js/**/*.js&apos;] // Change this path to your source file folder</div><div class="line">      &#125;,</div><div class="line">      options:&#123;</div><div class="line">        debug: true,</div><div class="line">        transform:[&apos;babelify&apos;]</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    build: &#123;</div><div class="line">      files:&#123;</div><div class="line">        &apos;public/build/js/main.js&apos;:[&apos;public/js/**/*.js&apos;] // Change this path to your source file folder</div><div class="line">      &#125;,</div><div class="line">      options:&#123;</div><div class="line">        debug: false,</div><div class="line">        transform:[&apos;babelify&apos;]</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  uglify: &#123;</div><div class="line">    build:&#123;</div><div class="line">      files:[</div><div class="line">        &#123;</div><div class="line">          expand:true,</div><div class="line">          src:&apos;public/build/js/**/*.js&apos;, // Change this path to your source file folder</div><div class="line">          dest:&apos;.&apos;, // here I overwrite the babel generated js file with minified file.</div><div class="line">          ext:&apos;.js&apos;,</div><div class="line">          extDot: &apos;last&apos;</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    options:&#123;</div><div class="line">      debug:false</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  watch:&#123;</div><div class="line">    browserify: &#123;</div><div class="line">      files: [&apos;public/js/**/*.js&apos;], // Change this path to your source file folder</div><div class="line">      tasks: [&apos;browserify:dev&apos;],</div><div class="line">      options: &#123;</div><div class="line">        spawn: true,</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// Load the plugin that provides the &quot;uglify&quot; task.</div><div class="line">grunt.loadNpmTasks(&apos;grunt-contrib-clean&apos;);</div><div class="line">grunt.loadNpmTasks(&apos;grunt-contrib-watch&apos;);</div><div class="line">grunt.loadNpmTasks(&apos;grunt-contrib-uglify&apos;);</div><div class="line">grunt.loadNpmTasks(&apos;grunt-browserify&apos;);</div><div class="line">grunt.loadNpmTasks(&apos;grunt-env&apos;);</div><div class="line"></div><div class="line">grunt.registerTask(&apos;default&apos;, [&apos;watch&apos;]);</div><div class="line">grunt.registerTask(&apos;dev&apos;, [&apos;env:dev&apos;, &apos;browserify:dev&apos;]);</div><div class="line">grunt.registerTask(&apos;build&apos;,  [&apos;env:build&apos;, &apos;browserify:build&apos;, &apos;uglify:build&apos;]);</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Major change has been made to ReactJS: JSXTransformer was deprecated, &lt;a href=&quot;https://facebook.github.io/react/docs/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Babel with Browserify&lt;/a&gt; is now the recommended way to transcribe the jsx files. I am documenting the setup process hoping it will be helpful in the future.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="Javascript" scheme="https://evertqin.github.io/blog/tags/Javascript/"/>
    
      <category term="ReactJS" scheme="https://evertqin.github.io/blog/tags/ReactJS/"/>
    
      <category term="Babel" scheme="https://evertqin.github.io/blog/tags/Babel/"/>
    
      <category term="Grunt" scheme="https://evertqin.github.io/blog/tags/Grunt/"/>
    
  </entry>
  
  <entry>
    <title>Brief summary of .call .apply and .bind in JavaScript</title>
    <link href="https://evertqin.github.io/blog/2015/11/08/post26/"/>
    <id>https://evertqin.github.io/blog/2015/11/08/post26/</id>
    <published>2015-11-08T05:00:00.000Z</published>
    <updated>2017-06-23T21:43:31.433Z</updated>
    
    <content type="html"><![CDATA[<p>John Resig’s book ‘Secretes of the JavaScript Ninja’ is really a fun and inspiring masterpiece to read. I believe it is one of the JavaScript book you should keep on your desk for study and reference. I am going to write something to summarize some important and interesting usages of .call(), .apply() and .bind() for my reference.</p>
<a id="more"></a>
<p>All of them are used to change the context of the calling function, a.k.a, the meaning of <code>this</code>. For top level function, it is always the <code>window</code> because everything is in the global scope. Often times, we want to change the meaning of this (for example, when we use ReactJS, oftentimes we need to attach function to properties such as <code>CompoentWillMount</code> and some data are retrieved through <code>this.state</code>, you have to use bind to bind this of the parent object to the attached function).</p>
<ol>
<li><p><code>call</code> and <code>apply</code></p>
<p>   In most of the cases, they can be used interchangeably, they only difference is that <code>call</code> accepts the object you want <code>this</code> to refer to as the first argument, followed by an arbitrary number of arguments as the arguments of the original function. Whereas <code>apply</code>, besides taking same first argument, expects an array of arguments as the second argument.</p>
</li>
<li><p><code>bind</code></p>
<p>   Bind is very useful in binding the context of this to a specific object without worrying about the context. We know that when a function is called as a method of an object, its this is set to the object the method is called on. The code snippet demonstrate how to fix the context of inner object to the outer object.</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">var something = &#123;</div><div class="line">  doSomething: function()&#123;</div><div class="line">    console.log(&quot;I am something&quot;);</div><div class="line">  &#125;,</div><div class="line">  doNothing:function()&#123;</div><div class="line">    var obj = &#123;</div><div class="line">      doSomething: function()&#123;</div><div class="line">        console.log(&quot;I am something in obj&quot;);</div><div class="line">      &#125;,</div><div class="line">      sample0: function()&#123;</div><div class="line">        this.doSomething();</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      sample1: function()&#123;</div><div class="line">        this.doSomething();</div><div class="line">      &#125;.bind(this)</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    obj.sample0();</div><div class="line">    obj.sample1();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>   Notice above program, if you remove the <code>.bind(this)</code>, you will see the print out <code>I am something in obj</code>. It is also useful in creating partial function.</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function add(a, b)&#123;</div><div class="line">  return a + b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(add(5, 6));</div><div class="line"></div><div class="line">var addTwo = add.bind(null, 2);</div><div class="line">console.log(addTwo(6));</div><div class="line"></div><div class="line">// same result can be achieved as bellow, this is more of a non-functional approach,</div><div class="line">// bind seems to create a new function object but this approach still uses the</div><div class="line">// original function reference</div><div class="line">var anotherAddTwo = function(a)&#123;</div><div class="line">  return add(a, 2);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">console.log(anotherAddTwo(6));</div><div class="line"></div><div class="line">var noArgs = add.bind(null, 2, 5);</div><div class="line">console.log(noArgs());</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;John Resig’s book ‘Secretes of the JavaScript Ninja’ is really a fun and inspiring masterpiece to read. I believe it is one of the JavaScript book you should keep on your desk for study and reference. I am going to write something to summarize some important and interesting usages of .call(), .apply() and .bind() for my reference.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="Javascript" scheme="https://evertqin.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>ILNumerics.NET Best Practices</title>
    <link href="https://evertqin.github.io/blog/2015/11/04/post25/"/>
    <id>https://evertqin.github.io/blog/2015/11/04/post25/</id>
    <published>2015-11-04T05:00:00.000Z</published>
    <updated>2017-06-23T21:42:36.017Z</updated>
    
    <content type="html"><![CDATA[<p>I have been working with <a href="http://ilnumerics.net/" target="_blank" rel="external">ILNumerics.NET</a> for quite a while. It is a fine piece of mathmatical library which provides better performance than most of the other .NET numeric libraries. Used properly, it’s performance can also surpass that of MATLAB.</p>
<a id="more"></a>
<p>However, since the user base for this library is quite small and it went commercial after version 3.3.3 , it is not very easy to get help. Moreover, the official guide is somewhat scattered around their instructions, tutorials and blog, sometimes, when you notice some problem, you are already late in the development cycle so you have to go back and do a lot of code refactoring, which, if known in the beginning, can be totally avoided. I am summarizing the best practices and tricks I have with this library so if you happen to start using this library, this guide can help you avoid some mistakes I made.</p>
<ol>
<li>Follow the function rule:<ul>
<li>Use In Array type as input (such as ILInArray<t>) and do not mutate the value of this;</t></li>
<li>Use Out Array type as output (such as ILOutArray<t>, comparable with out keyword in C#), use assigner (.a) notation to mutate the value, also make sure initializing before passing in as Out Array;</t></li>
<li>Use Ret Array for return value, this array will be destroyed after first use. <a href="http://ilnumerics.net/FunctionRules.html" target="_blank" rel="external">Reference</a></li>
</ul>
</li>
<li><em>Important</em> wrap everything within using(ILScope.Enter()), if you want to hold the input array Reference, put them as parameters inside Enter(); Consider wrapping the for loop for better performance;<a href="http://ilnumerics.net/PerfMemoryOpt.html" target="_blank" rel="external">Reference</a></li>
<li>if you want to use ILArray<t> as class member, declare it as readonly then initialize with ILMath.localMember. <a href="http://ilnumerics.net/blog/using-ilarray-as-class-attributes/" target="_blank" rel="external">Reference</a></t></li>
<li>Two Settings switches are very important:<br>Everything is summarized in the attached code <code>Settings.AllowInArrayAssignments = false;</code>, <code>Settings.MaxNumberThreads = 1;</code> Refer to the code for explanation.</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using ILNumerics;</div><div class="line"></div><div class="line">namespace ilnumerics_tricks</div><div class="line">&#123;</div><div class="line">    /// &lt;summary&gt;</div><div class="line">    /// We extend ILMath class so we don&apos;t need to prefix all the functions with ILMath. static class name</div><div class="line">    /// &lt;/summary&gt;</div><div class="line">    class SampleClass : ILMath, IDisposable</div><div class="line">    &#123;</div><div class="line">        /// &lt;summary&gt;</div><div class="line">        /// By default, all the ILArrays are disposed after they went out of the ILScope,</div><div class="line">        /// but sometimes we want to keep them as a class member and live with the class</div><div class="line">        /// to do this, we need to declare them as localMember&lt;T&gt;(), then our class needs to</div><div class="line">        /// implement IDisposable interface and explicitly destroy this ILArray Instance</div><div class="line">        /// &lt;/summary&gt;</div><div class="line">        private ILArray&lt;double&gt; classMember = localMember&lt;double&gt;();</div><div class="line"></div><div class="line">        static SampleClass()</div><div class="line">        &#123;</div><div class="line">            //Performance switch, dis-/allow direct assignments to input parameters</div><div class="line">            //- brings more efficient memory management, default: true (safer, less efficient)</div><div class="line">            Settings.AllowInArrayAssignments = false;</div><div class="line"></div><div class="line">            // By default, ILNumerics.NET sets this to 2 on all multicore machines.</div><div class="line">            // Therefore, this setting should be set manually for better processor utilization</div><div class="line">            // on multicore machines.</div><div class="line">            // This setting is very important if you want to use C# Parallel functions,</div><div class="line">            // you have to set it to 1 and manage parallelism by yourself, otherwise,</div><div class="line">            // you may get random null object reference error.</div><div class="line">            Settings.MaxNumberThreads = 1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /// &lt;summary&gt;</div><div class="line">        /// Below is a useless function to demonstrate the function concept</div><div class="line">        /// &lt;/summary&gt;</div><div class="line">        /// &lt;param name=&quot;data1&quot;&gt;The input array has to have &quot;In&quot;, this makes a contract</div><div class="line">        /// that this is an input data, which should not be mutable,  if we follow this rule,</div><div class="line">        /// we can use Settings.AllowInArrayAssignments = false;  to make an agreement with</div><div class="line">        /// the library that we are not alternating the input data, this will result in a</div><div class="line">        /// performance gain from 1% to 30%(http://ilnumerics.net/apidoc/html/P_ILNumerics_Settings_AllowInArrayAssignments.htm)&lt;/param&gt;</div><div class="line">        /// &lt;param name=&quot;data2&quot;&gt;The output array (much like out keyword) serve as additional,</div><div class="line">        /// optional, output parameter of a function,  it is fully mutable, it is suggested</div><div class="line">        /// to use array accessor &quot;.a&quot; to access  by convention, we put ILOutArray as the last</div><div class="line">        ///  arguments and set their default values to false.&lt;/param&gt;</div><div class="line">        /// &lt;returns&gt;the return value has to have &quot;Ret&quot;, this makes a contract that this</div><div class="line">        /// return value will be disposed and garbage collected after first use&lt;/returns&gt;</div><div class="line">        public ILRetArray&lt;double&gt; BasicFunctionStructure(ILInArray&lt;double&gt; data1, ILOutArray&lt;double&gt; data2 = null)</div><div class="line">        &#123;</div><div class="line">            // Function bodies of any computational function must be enclosed with a</div><div class="line">            // construct according to the following scheme:</div><div class="line">            using (ILScope.Enter(data1))</div><div class="line">            &#123;</div><div class="line">                ILArray&lt;double&gt; summation = sum(data1);</div><div class="line"></div><div class="line">                for (int i = 0; i &lt; 1000; ++i)</div><div class="line">                &#123;</div><div class="line">                    // you may consider wrapping your function with ILScope inside a loop</div><div class="line">                    // for better memory management</div><div class="line">                    using (ILScope.Enter())</div><div class="line">                    &#123;</div><div class="line">                        ILArray&lt;double&gt; trash = sqrt(data1);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line"></div><div class="line">                if (!isnull(data2))</div><div class="line">                &#123;</div><div class="line">                    data2.a = ones(data1.S);</div><div class="line">                &#125;</div><div class="line">                return summation;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /// &lt;summary&gt;</div><div class="line">        /// It is always a good idea to wrap all your ILNumerics.NET code within</div><div class="line">        /// a using(ILScope.Enter()) block  Here we use check function and use a</div><div class="line">        /// lambda function to get the result, here we reused the memory space of data1,</div><div class="line">        /// then transfer the result directly to the return value, this saves our effort</div><div class="line">        /// of allocating extra memory</div><div class="line">        /// &lt;/summary&gt;</div><div class="line">        /// &lt;param name=&quot;data1&quot;&gt;&lt;/param&gt;</div><div class="line">        /// &lt;returns&gt;&lt;/returns&gt;</div><div class="line">        public ILRetArray&lt;double&gt; InPlaceArrayManipulation(ILInArray&lt;double&gt; data1)</div><div class="line">        &#123;</div><div class="line">            using (ILScope.Enter(data1))</div><div class="line">            &#123;</div><div class="line">                return check(data1, todouble);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        public void Dispose()</div><div class="line">        &#123;</div><div class="line">            // this is important if we want to use ILArray as a class Member</div><div class="line">            if (!isnull(classMember)) &#123; classMember.Dispose(); &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        static void Main(string[] args)</div><div class="line">        &#123;</div><div class="line">            using (ILScope.Enter())</div><div class="line">            &#123;</div><div class="line">                SampleClass smapleClass = new SampleClass();</div><div class="line">                ILArray&lt;double&gt; input = new[] &#123;1.0, 2.0&#125;;</div><div class="line">                ILArray&lt;double&gt; output = empty();</div><div class="line"></div><div class="line">                ILArray&lt;double&gt; returnValue = smapleClass.BasicFunctionStructure(input, output);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have been working with &lt;a href=&quot;http://ilnumerics.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ILNumerics.NET&lt;/a&gt; for quite a while. It is a fine piece of mathmatical library which provides better performance than most of the other .NET numeric libraries. Used properly, it’s performance can also surpass that of MATLAB.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="C#" scheme="https://evertqin.github.io/blog/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Disjoint-set data structure</title>
    <link href="https://evertqin.github.io/blog/2015/10/20/post24/"/>
    <id>https://evertqin.github.io/blog/2015/10/20/post24/</id>
    <published>2015-10-20T04:00:00.000Z</published>
    <updated>2017-06-23T21:42:26.809Z</updated>
    
    <content type="html"><![CDATA[<p>An interesting problem, given some numbers, group them into individual sets based on certain rules. For example, for numbers between, we group them into sets (0, 0), [1, 5), [10, 30), [30, 60), [60, 100]. I found this <a href="https://www.topcoder.com/community/data-science/data-science-tutorials/disjoint-set-data-structures/" target="_blank" rel="external">article</a> on topcode is very helpful. Below is an implementation in C++.</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;unordered_map&gt;</div><div class="line">#include &lt;unordered_set&gt;</div><div class="line">#include &lt;set&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;climits&gt;</div><div class="line">#include &lt;stack&gt;</div><div class="line">#include &lt;queue&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line">#include &lt;iterator&gt;</div><div class="line">#include &lt;assert.h&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">struct Node &#123;</div><div class="line">  int rank;</div><div class="line">  int value;</div><div class="line">  Node * parent;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class DisjointSets&#123;</div><div class="line">private:</div><div class="line">  int _count;</div><div class="line">  int _numElements;</div><div class="line">  int _numSets;</div><div class="line">  unordered_map&lt;int, Node *&gt; _nodes;</div><div class="line">public:</div><div class="line">  DisjointSets(): _numElements(0), _numSets(0)&#123;&#125;</div><div class="line"></div><div class="line">  ~DisjointSets()&#123;</div><div class="line">    for(auto it = _nodes.begin(); it != _nodes.end(); ++it)&#123;</div><div class="line">      delete it-&gt;second;</div><div class="line">    &#125;</div><div class="line">    _nodes.clear();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  int find_set(int element) &#123;</div><div class="line">    if(!_nodes.count(element))&#123;</div><div class="line">      return -1;</div><div class="line">    &#125;</div><div class="line">    Node * curr = _nodes[element];</div><div class="line"></div><div class="line">    while(curr-&gt;parent)&#123;</div><div class="line">      curr = curr-&gt;parent;</div><div class="line">    &#125;</div><div class="line">    Node * root = curr;</div><div class="line"></div><div class="line">    // update the parents along the way</div><div class="line">    curr = _nodes[element];</div><div class="line">    while(curr != root)&#123;</div><div class="line">      Node * next = curr-&gt;parent;</div><div class="line">      curr-&gt;parent = root;</div><div class="line">      curr = next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return root-&gt;value;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  void make_union(int setId1, int setId2)&#123;</div><div class="line">    if(setId1 == setId2)&#123;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if(!_nodes.count(setId1))&#123;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line">    Node* set1 = _nodes[setId1];</div><div class="line">    if(!_nodes.count(setId2))&#123;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line">    Node* set2 = _nodes[setId2];</div><div class="line"></div><div class="line">    if(set1-&gt;rank &gt; set2-&gt;rank)&#123;</div><div class="line">      set2-&gt;parent = set1;</div><div class="line">    &#125; else if(set1-&gt;rank &lt; set2-&gt;rank)&#123;</div><div class="line">      set1-&gt;parent = set2;</div><div class="line">    &#125; else &#123;</div><div class="line">      set2-&gt;parent = set1;</div><div class="line">      set1-&gt;rank++;</div><div class="line">    &#125;</div><div class="line">    --_numSets;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  void add_element(int element) &#123;</div><div class="line">    _nodes[element] = new Node();</div><div class="line">    _nodes[element]-&gt;parent = NULL;</div><div class="line">    _nodes[element]-&gt;value = element;</div><div class="line">    _nodes[element]-&gt;rank = 0;</div><div class="line"></div><div class="line">    _numElements++;;</div><div class="line">    _numSets++;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  int get_num_elements() const &#123;</div><div class="line">    return _numElements;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  int get_num_sets() const &#123;</div><div class="line">    return _numSets;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">void printElementSets(DisjointSets &amp; s, const vector&lt;int&gt;&amp; nums)</div><div class="line">&#123;</div><div class="line">  assert(nums.size() &lt;= s.get_num_elements());</div><div class="line">  for (int i = 0; i &lt; nums.size(); ++i) &#123;</div><div class="line">    cout &lt;&lt; s.find_set(nums[i]) &lt;&lt; &quot;  &quot;;</div><div class="line">  &#125;</div><div class="line">  cout &lt;&lt; endl;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void groupTogether(DisjointSets&amp; s, const vector&lt;int&gt;&amp; nums, map&lt;int, vector&lt;int&gt;&gt;&amp; groups)&#123;</div><div class="line">  assert(nums.size() &lt;= s.get_num_elements());</div><div class="line">  for (int i = 0; i &lt; nums.size() &amp;&amp; i &lt; s.get_num_elements(); ++i) &#123;</div><div class="line">    groups[s.find_set(nums[i])].push_back(nums[i]);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void prettyPrintGroups(const map&lt;int, vector&lt;int&gt;&gt;&amp; groups)&#123;</div><div class="line">  for(auto it = groups.begin(); it != groups.end(); ++it)&#123;</div><div class="line">    std::cout &lt;&lt; &quot;Group &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot; -------------&quot;&lt;&lt; std::endl;</div><div class="line">    for(int i = 0; i &lt;  it-&gt;second.size(); ++i)&#123;</div><div class="line">      std::cout &lt;&lt; it-&gt;second[i] &lt;&lt; &quot;  &quot;;</div><div class="line">    &#125;</div><div class="line">    std::cout &lt;&lt;  std::endl;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void testGenerator(int size)&#123;</div><div class="line">  vector&lt;pair&lt;int, int&gt;&gt; rules&#123;&#123;0, 0&#125;, &#123;1, 5&#125;, &#123;10, 30&#125;, &#123;30, 60&#125;, &#123;60, 100&#125;&#125;;</div><div class="line">  vector&lt;int&gt; randoms;</div><div class="line">  for(int i = 0; i &lt; size; ++i)&#123;</div><div class="line">    randoms.push_back(random() % 100);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  DisjointSets s;</div><div class="line"></div><div class="line">  for_each(randoms.begin(), randoms.end(), [&amp;](int num)&#123;s.add_element(num); &#125;);</div><div class="line"></div><div class="line">  std::cout &lt;&lt; &quot;Orginal data:&quot; &lt;&lt; std::endl;</div><div class="line">  printElementSets(s, randoms);</div><div class="line"></div><div class="line">  for(int i = 0; i &lt; rules.size(); ++i)&#123;</div><div class="line">    int rep = rules[i].first;</div><div class="line">    // push representative to DisjointSets</div><div class="line">    s.add_element(rep);</div><div class="line">    for(int j = rules[i].first + 1 ; j &lt; rules[i].second; ++j)&#123;</div><div class="line">      s.make_union(s.find_set(rep), s.find_set(j));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  std::cout &lt;&lt; &quot;After union find, group representative:&quot; &lt;&lt; std::endl;</div><div class="line">  printElementSets(s, randoms);</div><div class="line">  std::cout  &lt;&lt; std::endl;</div><div class="line"></div><div class="line">  // group together</div><div class="line">  map&lt;int, vector&lt;int&gt;&gt; groups;</div><div class="line">  groupTogether(s, randoms, groups);</div><div class="line">  prettyPrintGroups(groups);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc, char *argv[])</div><div class="line">&#123;</div><div class="line">  const int DATA_SIZE = 10;</div><div class="line">  testGenerator(DATA_SIZE);</div><div class="line">  return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Sample Output:<br>Orginal data:<br>83  86  77  15  93  35  86  92  49  21<br>After union find, group representative:<br>60  60  60  10  60  30  60  60  30  10  </p>
<p>Group 10 ————-<br>15  21<br>Group 30 ————-<br>35  49<br>Group 60 ————-<br>83  86  77  93  86  92<br>~~~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;An interesting problem, given some numbers, group them into individual sets based on certain rules. For example, for numbers between, we group them into sets (0, 0), [1, 5), [10, 30), [30, 60), [60, 100]. I found this &lt;a href=&quot;https://www.topcoder.com/community/data-science/data-science-tutorials/disjoint-set-data-structures/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;article&lt;/a&gt; on topcode is very helpful. Below is an implementation in C++.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="C++" scheme="https://evertqin.github.io/blog/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Bring Together RequireJS and AngularJS</title>
    <link href="https://evertqin.github.io/blog/2015/10/08/post23/"/>
    <id>https://evertqin.github.io/blog/2015/10/08/post23/</id>
    <published>2015-10-08T04:00:00.000Z</published>
    <updated>2017-06-23T21:42:21.128Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I accidentally poked into the frontend development code of some company. That website does not use too many frontend<br>frameworks except for jQuery and another one I am going to talk about today – RequireJS.</p>
<a id="more"></a>
<p>I would say when I first saw it during interview, the structure looked very familiar to me.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define([&apos;jquery&apos;, &apos;underscore&apos;], function($, _) &#123;</div><div class="line">    ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>I remember doing something similiar in AngularJS too.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mainApp.controller(&apos;controller&apos;, [&apos;$scope&apos;], function($scope)&#123;&#125;);</div></pre></td></tr></table></figure></p>
<p>When we need to specify the dependencies, we put them<br>in an array and pass them as arguments to the function. Similar as they appear, bringing them together is not entirely easy. The difficult is because of how those frameworks work:</p>
<p>The concept of RequireJS is based on Asynchronous Module Loading (AMD). That is<br>modules are loaded in an async way by the order you specified but it is not guaranteed the order is still maintained due to asynchronous nature.<a href="http://www.sitepoint.com/understanding-requirejs-for-effective-javascript-module-loading/" target="_blank" rel="external">*</a>. Some<br>a <code>shim</code> option is provided to manage the dependencies.</p>
<p>The concept of AngularJS:</p>
<p>Angular initializes automatically upon DOMContentLoaded event or when the angular.js script is evaluated if at that time document.readyState is set to ‘complete’. At this point Angular looks for the ng-app directive which designates your application root. If the ng-app directive is found then Angular will:</p>
<ul>
<li>load the module associated with the directive.</li>
<li>create the application injector</li>
<li>compile the DOM treating the ng-app directive as the root of the compilation. This allows you to tell it to treat only a portion of the DOM as an Angular application.</li>
</ul>
<p>If we use automatic initialization, our application will fail for some module not found error.<br>The conflict here is: RequireJS delays the loading of js after page is rendered but angular js needs define those directives before replacing portion of DOM as ng-app. So we have to use manual bootstrapping when document is ready.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── app</div><div class="line">│   ├── blog</div><div class="line">│   │   ├── angular</div><div class="line">│   │   │   ├── blogApp.js</div><div class="line">│   │   │   └── blogFilter.js</div><div class="line">│   │   └── blog.main.js</div><div class="line">│   ├── index</div><div class="line">│   │   ├── angular</div><div class="line">│   │   │   ├── mainApp.js</div><div class="line">│   │   │   ├── randomFixedImage.js</div><div class="line">│   │   │   └── randomImage.js</div><div class="line">│   │   └── index.main.js</div><div class="line">│   ├── photography</div><div class="line">│   │   └── photography.main.js</div><div class="line">│   └── post.main.js</div><div class="line">├── blog.js</div><div class="line">├── common.js</div><div class="line">├── constants</div><div class="line">│   └── constants.js</div><div class="line">├── index.js</div><div class="line">├── lib</div><div class="line">│   ├── count.js</div><div class="line">│   ├── header-scroll.js</div><div class="line">│   ├── jquery.simplePagination.js</div><div class="line">│   ├── require.js</div><div class="line">│   ├── smoothscroll.js</div><div class="line">│   └── utils.js</div><div class="line">├── photography.js</div><div class="line">├── post.js</div></pre></td></tr></table></figure></p>
<p>I put all the common libraries into lib folder. In my html page, first call <code>&lt;script data-main=&quot;/build/js/index&quot; async=&quot;&quot; src=&quot;/build/js/lib/require.js&quot;&gt;&lt;/script&gt;</code>. This tells requirejs<br>to load itself first in async manner, then load the index.js file under the path we specified.</p>
<p>Our index js is merely like following:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">require([&apos;./common&apos;], function (common) &#123;</div><div class="line">    require([&apos;/js/app/index/index.main.js&apos;]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>common.js contains config for requirejs, because angular does not support AMD, we need to define it in <code>shim</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">require.config(&#123;</div><div class="line">    baseUrl: &apos;/build/js/app&apos;,</div><div class="line">    paths: &#123;</div><div class="line"></div><div class="line">        angular: &quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.7/angular&quot;,</div><div class="line">    &#125;,</div><div class="line">    // angular does not support AMD out of the box, put it in a shim</div><div class="line">  shim: &#123;</div><div class="line">    &apos;angular&apos;: &#123;</div><div class="line">      exports: &apos;angular&apos;</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Following structure is a zoom in view of the structure for saving all the js related with index page. I break down angular module into small parts and make each of them a seperate requirejs module.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── angular</div><div class="line">│   ├── mainApp.js</div><div class="line">│   ├── randomFixedImage.js</div><div class="line">│   └── randomImage.js</div><div class="line">└── index.main.js</div></pre></td></tr></table></figure></p>
<p>Take mainApp.js as an example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">define([&apos;angular&apos;], function(angular)&#123;</div><div class="line">  &apos;use strict&apos;;</div><div class="line"></div><div class="line">  var mainApp = angular.module(&apos;mainApp&apos;, []);</div><div class="line"></div><div class="line">  // bootstrap angular here, notice we need to apply directive before bootstraping</div><div class="line">  mainApp.init = function() &#123;</div><div class="line">      angular.bootstrap(document, [&apos;mainApp&apos;]);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  mainApp.controller(&apos;backgroundController&apos;, [&apos;$scope&apos;,function($scope)&#123;</div><div class="line">  &#125;])</div><div class="line">  .factory(&apos;getImage&apos;, [function(imageUrls)&#123;</div><div class="line">    function getImage(imageUrls)&#123;</div><div class="line">      var selectedImageIdx = Math.floor(Math.random() * imageUrls.length);</div><div class="line">      return imageUrls[selectedImageIdx];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return getImage;</div><div class="line">  &#125;]);</div><div class="line"></div><div class="line">  return mainApp;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>We return mainApp as a require module. Then for randomFixedImage directive, we need to declare mainApp as a dependent), apply the directive to it and return.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">define([&apos;./mainApp&apos;, &apos;constants&apos;], function(mainApp, constants)&#123;</div><div class="line">  &apos;use strict&apos;;</div><div class="line"></div><div class="line">  mainApp.directive(&apos;randomFixedImage&apos;, [&apos;getImage&apos;, function(getImage)&#123;</div><div class="line">    var link = function(scope, element, attrs)&#123;</div><div class="line">      var url = getImage(constants.staticImageUrls);</div><div class="line">      element.css(&#123;</div><div class="line">        &apos;background-image&apos;:&apos;url(&apos; + url + &apos;)&apos;,</div><div class="line">      &#125;);</div><div class="line">    &#125;;</div><div class="line">    return &#123;</div><div class="line">      restrict:&apos;A&apos;,</div><div class="line">      link: link</div><div class="line">    &#125;;</div><div class="line">  &#125;]);</div><div class="line"></div><div class="line">  return mainApp;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Finally, we need to bootstrap this angular module in <code>index.main.js</code>. To make sure mainApp is initialized first, we put it as dependent in the beginning. Then we load two directives<br>and call app.init();</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">require([&quot;jquery&quot;,&quot;skrollr&quot;, &quot;./index/angular/mainApp&quot;], function($, skrollr, app) &#123;</div><div class="line">  &quot;use strict&quot;;</div><div class="line"></div><div class="line">  require([&quot;./index/angular/randomFixedImage&quot;, &quot;./index/angular/randomImage&quot;], function()&#123;</div><div class="line">    app.init();</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  ....</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently, I accidentally poked into the frontend development code of some company. That website does not use too many frontend&lt;br&gt;frameworks except for jQuery and another one I am going to talk about today – RequireJS.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="AngularJS" scheme="https://evertqin.github.io/blog/tags/AngularJS/"/>
    
      <category term="Javascript" scheme="https://evertqin.github.io/blog/tags/Javascript/"/>
    
      <category term="RequireJS" scheme="https://evertqin.github.io/blog/tags/RequireJS/"/>
    
  </entry>
  
  <entry>
    <title>Note of some libraries</title>
    <link href="https://evertqin.github.io/blog/2015/10/01/post21/"/>
    <id>https://evertqin.github.io/blog/2015/10/01/post21/</id>
    <published>2015-10-01T04:00:00.000Z</published>
    <updated>2017-06-23T21:42:00.326Z</updated>
    
    <content type="html"><![CDATA[<p>(PlaceHolder)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(PlaceHolder)&lt;/p&gt;

    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="Javascript" scheme="https://evertqin.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>React.js Study Note (2) - Making a simple dynamic router</title>
    <link href="https://evertqin.github.io/blog/2015/10/01/post22/"/>
    <id>https://evertqin.github.io/blog/2015/10/01/post22/</id>
    <published>2015-10-01T04:00:00.000Z</published>
    <updated>2017-06-23T21:46:57.726Z</updated>
    
    <content type="html"><![CDATA[<p>I am exploring ReactJS a bit further. I think the key part to understand is how data flows between compoents. The rule is “Data (props) flows from parents to children while events bubble up from children to parents. State or props change will cause compoents to refresh.”. With this in mind it is easy to create a dynamic UI. Today, I am going to create a simple UI that gets all the svgs from a static folder, and give user a list of svg files so they can choose to display selected svg. This is like a very simple file server.</p>
<a id="more"></a>
<p><img src="/home/ruogu/Pictures/Screenshot-react.png" alt="Screen Shot"></p>
<ol>
<li><p>Create the backend Service</p>
<p> First, we need to create a server. You can choose the technology you are mostly comfortable with. Here I am using nodeJS to server files and static contents.</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">var http = require(&apos;http&apos;);</div><div class="line">var url = require(&apos;url&apos;);</div><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line"></div><div class="line">var server = http.createServer(function(req, res)&#123;</div><div class="line">  res.writeHead(200, &#123;&apos;Content-Type&apos;:&apos;text/plain&apos;, &apos;Access-Control-Allow-Origin&apos;:&apos;http://localhost:8000&apos;&#125;);</div><div class="line">  var basePath = &apos;svgs/&apos;;</div><div class="line">  var query = url.parse(req.url, true).query;</div><div class="line">  var name = query.name;</div><div class="line"></div><div class="line">  if(name === &apos;all&apos;)&#123;</div><div class="line">    fs.readdir(basePath, function(err, files)&#123;</div><div class="line">      res.end(JSON.stringify(files));</div><div class="line">    &#125;);</div><div class="line">  &#125; else &#123;</div><div class="line">    var path = basePath + name;</div><div class="line"></div><div class="line">    fs.readFile(path, &apos;utf8&apos;,function(err, content)&#123;</div><div class="line">        res.end(content);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(1337);</div><div class="line">console.log(&apos;Server is running&apos;);</div></pre></td></tr></table></figure>
<p> Several things to notice here, 1) I set ‘Access-Control-Allow-Origin’ to ‘<a href="http://localhost:8000" target="_blank" rel="external">http://localhost:8000</a>‘ because later, I need to serve react jsx file with anther static file http server. By the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">CORS</a> rule of http protocol, our server needs to return this in the http response header to make itself accessible from another http server. This is not sercure but it makes the demonstration easier. 2) I used query string, using a restful url path is actually more preferable.</p>
<p> Now run the server as <code>node main.js</code>.</p>
</li>
<li><p>Create React jsx file</p>
<p> First, I am creating different components. LeftListBox is used to display a list of files in the folder, RightSvgBox shows the svg content when an item from left is chosen. Jquery ajax is used to retrieve data from backend server.</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line">(function ($) &#123;</div><div class="line">  var NamesList = React.createClass(&#123;</div><div class="line">      handleClick: function (name, index) &#123;</div><div class="line">          this.setState(&#123;selectedIndex:index&#125;);</div><div class="line">          this.props.onUpdate(index);</div><div class="line">      &#125;,</div><div class="line">      render: function () &#123;</div><div class="line">          var namesList = this.props.names.map(function (name, index) &#123;</div><div class="line">              return (</div><div class="line">                  &lt;li&gt;</div><div class="line">                      &lt;a onClick=&#123;this.handleClick.bind(this, name, index)&#125;&gt;&#123;name&#125;&lt;/a&gt;</div><div class="line">                  &lt;/li&gt;</div><div class="line">                  );</div><div class="line">          &#125;.bind(this));</div><div class="line"></div><div class="line">          return (</div><div class="line">              &lt;ul className=&quot;namesList&quot;&gt;</div><div class="line">               &#123;namesList&#125;</div><div class="line">              &lt;/ul&gt;</div><div class="line">              );</div><div class="line">      &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  var LeftListBox = React.createClass(&#123;</div><div class="line">      render: function () &#123;</div><div class="line">          return (</div><div class="line">              &lt;div className=&quot;leftListBox&quot;&gt;</div><div class="line">                  &lt;NamesList names=&#123;this.props.names&#125; onUpdate=&#123;this.props.onUpdate&#125;&gt;&lt;/NamesList&gt;</div><div class="line">              &lt;/div&gt;</div><div class="line">              );</div><div class="line">      &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  var RightSvgBox = React.createClass(&#123;</div><div class="line">      getInitialState: function()&#123;</div><div class="line">          return &#123;image:&quot;&lt;div&gt;The image is empty&lt;/div&gt;&quot;&#125;;</div><div class="line">      &#125;,</div><div class="line">      componentDidMount: function()&#123;</div><div class="line">          this.setState(&#123;image:&quot;&lt;div&gt;The image is empty&lt;/div&gt;&quot;&#125;)</div><div class="line">      &#125;,</div><div class="line">      componentWillReceiveProps: function () &#123;</div><div class="line">          var selectedName;</div><div class="line">          if(this.props.names.length == 0)&#123;</div><div class="line">              selectedName = &quot;&quot;;</div><div class="line">          &#125; else &#123;</div><div class="line">              selectedName = this.props.names[this.props.selectedIndex];</div><div class="line">          &#125;</div><div class="line">          var fullUrl = this.props.baseurl + &quot;?name=&quot; + selectedName;</div><div class="line">          $.ajax(&#123;</div><div class="line">              url: fullUrl,</div><div class="line">              cache: true,</div><div class="line">              success: function (svg) &#123;</div><div class="line"></div><div class="line">                  if(svg.length === 0)&#123;</div><div class="line">                      this.setState(&#123;image:&quot;&lt;div&gt;Choose one from the left...&lt;/div&gt;&quot;&#125;)</div><div class="line">                  &#125; else &#123;</div><div class="line">                      var re = /&lt;svg/;</div><div class="line">                      svg = svg.replace(re, &apos;&lt;svg viewBox=&quot;0 0 1280 768&quot;&apos;);</div><div class="line">                      this.setState(&#123;image: svg&#125;)</div><div class="line">                  &#125;</div><div class="line">              &#125;.bind(this),</div><div class="line">              error: function (xhr, status, err) &#123;</div><div class="line">                  console.error(fullUrl, status, err.toString());</div><div class="line">              &#125;</div><div class="line"></div><div class="line">          &#125;);</div><div class="line"></div><div class="line">      &#125;,</div><div class="line">      render: function () &#123;</div><div class="line">          return (</div><div class="line">               &lt;div className=&quot;rightSvgBox&quot; dangerouslySetInnerHTML=&#123;&#123;__html: this.state.image&#125;&#125;&gt;</div><div class="line">               &lt;/div&gt;</div><div class="line">              );</div><div class="line">      &#125;,</div><div class="line">  &#125;);</div><div class="line"></div><div class="line"></div><div class="line">  var DisplayPage = React.createClass(&#123;</div><div class="line">      getInitialState: function()&#123;</div><div class="line">          return &#123;names:[], selectedIndex:0&#125;;</div><div class="line">      &#125;,</div><div class="line">      componentDidMount: function () &#123;</div><div class="line">          $.ajax(&#123;</div><div class="line">              url: this.props.baseurl + &apos;?name=all&apos;,</div><div class="line">              dataType:&apos;json&apos;,</div><div class="line">              cache: true,</div><div class="line">              success: function (names) &#123;</div><div class="line">                  this.setState(&#123; names: names &#125;);</div><div class="line">              &#125;.bind(this),</div><div class="line">              error: function (xhr, status, err) &#123;</div><div class="line">                  console.error(xhr);</div><div class="line">              &#125;.bind(this),</div><div class="line">          &#125;);</div><div class="line">      &#125;,</div><div class="line">      onUpdate : function(selectedIndex)&#123;</div><div class="line">          this.setState(&#123;selectedIndex:selectedIndex&#125;);</div><div class="line">      &#125;,</div><div class="line">      render: function() &#123;</div><div class="line">          return (</div><div class="line">              &lt;div className=&quot;row&quot;&gt;</div><div class="line">                  &lt;div className=&quot;col-md-3&quot;&gt;</div><div class="line">                      List of Available Files:</div><div class="line">                    &lt;LeftListBox names=&#123;this.state.names&#125; onUpdate=&#123;this.onUpdate&#125;&gt;&lt;/LeftListBox&gt;</div><div class="line">              &lt;/div&gt;</div><div class="line">                  &lt;div className=&quot;col-md-9&quot;&gt;</div><div class="line">                      &lt;RightSvgBox names=&#123;this.state.names&#125; baseurl=&#123;this.props.baseurl&#125; selectedIndex=&#123;this.state.selectedIndex&#125;&gt;&lt;/RightSvgBox&gt;</div><div class="line">                  &lt;/div&gt;</div><div class="line">              &lt;/div&gt;</div><div class="line">              );</div><div class="line">      &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line"></div><div class="line">  var baseurl = &apos;http://localhost:1337/check&apos;;</div><div class="line">  var url = baseurl + &apos;?name=all&apos;;</div><div class="line">  React.render(</div><div class="line">    &lt;DisplayPage baseurl=&#123;baseurl&#125;&gt;Sample&lt;/DisplayPage&gt;,</div><div class="line">    document.getElementById(&apos;__reactApp&apos;)</div><div class="line">  );</div><div class="line"></div><div class="line"></div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
<p> Explanation of the code:</p>
<ol>
<li><p>First I created a compoent <code>DisplayPage</code>. I am intending to split the view into two columns, left column will be a list of clickable options (LeftListBox), right column will the actual svg (RightSvgBox).</p>
</li>
<li><p>First, we need to use ajax to retrieve data from backend, according the document of <a href="https://facebook.github.io/react/docs/component-specs.html#mounting-componentdidmount" target="_blank" rel="external">componentDidMount</a>. We put our ajax into this function because we want to retrieve the data before DOM is rendered.</p>
</li>
<li><p>The retrieved data is set into state (Remeber to always use this.setState!). I am then passing names through props from parent(DisplayPage) to children (LeftListBox and RightSvgBox). Notice the names={this.state.names} attribute in the html.</p>
</li>
<li><p>Children take data through this.props.names. Notice we are also passing an OnUpdate callback from parent to children. This is because we want to bubble up some information from children to parent. Upon getting new data, this callback is called, and parent state is mutated. All the children will react to to modified state and go through the page cycle again.</p>
</li>
<li><p><a href="https://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops" target="_blank" rel="external">componentWillReceiveProps</a> is pretty handy in my application because when user click on the link, i need to send an ajax to backend to get svg. After successfully getting data, I then modified state and render the page. This method is not called during initial rendering and changing state within this function does not trigger addition render. So I can safely set the page state in the ajax sucess callback. If we use other method like compoentWillUpdate, we run into infinite update loop.</p>
</li>
</ol>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I am exploring ReactJS a bit further. I think the key part to understand is how data flows between compoents. The rule is “Data (props) flows from parents to children while events bubble up from children to parents. State or props change will cause compoents to refresh.”. With this in mind it is easy to create a dynamic UI. Today, I am going to create a simple UI that gets all the svgs from a static folder, and give user a list of svg files so they can choose to display selected svg. This is like a very simple file server.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="Javascript" scheme="https://evertqin.github.io/blog/tags/Javascript/"/>
    
      <category term="ReactJS" scheme="https://evertqin.github.io/blog/tags/ReactJS/"/>
    
  </entry>
  
  <entry>
    <title>React.js Study Note (1)</title>
    <link href="https://evertqin.github.io/blog/2015/09/24/post20/"/>
    <id>https://evertqin.github.io/blog/2015/09/24/post20/</id>
    <published>2015-09-24T04:00:00.000Z</published>
    <updated>2017-06-23T21:41:54.087Z</updated>
    
    <content type="html"><![CDATA[<p>I am doing a new project recently so I am trying to follow the react.js tutorial and make use of this new technology in my project. It is claimed that the concept of react.js is fondamentally different from AngularJS. For example AngularJS is a full MVC framework but ReactJS is only the View of the MVC. The following figure demonstrated the whole concept.</p>
<a id="more"></a>
<p><img src="http://i1-news.softpedia-static.com/images/news2/Basic-Differences-Between-AngularJS-and-React-484781-2.jpg" alt="Compare AngularJS with ReactJS"></p>
<p>I will add other things from time to time</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;content&quot;&gt;</div><div class="line">  &lt;div id=&quot;pageTitle&quot; class=&quot;container&quot;&gt;</div><div class="line">    &lt;div class=&quot;row&quot;&gt;</div><div class="line">      &lt;div class=&quot;col-md-3&quot;&gt;</div><div class="line">        &lt;div id=&quot;leftlist&quot;&gt;&lt;/div&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">(function ($) &#123;</div><div class="line">    var NamesList = React.createClass(&#123;</div><div class="line">        render: function () &#123;</div><div class="line">            var namesList = this.props.names.map(function (name) &#123;</div><div class="line">                return (</div><div class="line">                    &lt;li&gt;</div><div class="line">                        &lt;a&gt;&#123;name.YLabel&#125;&lt;/a&gt;</div><div class="line">                    &lt;/li&gt;</div><div class="line">                    );</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            return (</div><div class="line">                &lt;ul className=&quot;namesList&quot;&gt;</div><div class="line">                    &#123;namesList&#125;</div><div class="line">                &lt;/ul&gt;</div><div class="line">                );</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    var LeftListBox = React.createClass(&#123;</div><div class="line">        getInitialState: function () &#123;</div><div class="line">          return &#123; names: [ &#123;YLabel:&quot;Test1&quot;&#125;,</div><div class="line">             &#123;YLabel:&quot;Test2&quot;&#125; ]&#125;;</div><div class="line">        &#125;,</div><div class="line">        componentDidMount: function () &#123;</div><div class="line">            $.ajax(&#123;</div><div class="line">                url: this.props.url,</div><div class="line">                dataType: &apos;json&apos;,</div><div class="line">                cache: false,</div><div class="line">                success: function (names) &#123;</div><div class="line">                    this.setState(&#123; names: names &#125;);</div><div class="line">                &#125;.bind(this),</div><div class="line">                error: function (xhr, status, err) &#123;</div><div class="line">                    console.error(this.props.url, status, err.toString());</div><div class="line">                &#125;.bind(this),</div><div class="line">            &#125;);</div><div class="line">        &#125;,</div><div class="line">        render: function () &#123;</div><div class="line">            return (</div><div class="line">                &lt;div className=&quot;leftListBox&quot;&gt;</div><div class="line">                    &lt;NamesList names=&#123;this.state.names&#125;&gt;&lt;/NamesList&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">                );</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    var url = &apos;Plot/AggregatedPlotHandler.ashx?name=all&apos;;</div><div class="line">    React.render(</div><div class="line">      &lt;LeftListBox url=&#123;url&#125;&gt;Sample&lt;/LeftListBox&gt;,</div><div class="line">      document.getElementById(&apos;leftlist&apos;)</div><div class="line">    );</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
<p>This is modified from tutorial. I am creating a list by making ajax request to a endpoint with querystring. The return is an array of objects. <code>getInitialState</code> helps us setup the default this.state value. <code>componentDidMount</code> , according to the official document:</p>
<p><em>Invoked once, only on the client (not on the server), immediately after the initial rendering occurs. At this point in the lifecycle, the component has a DOM representation which you can access via React.findDOMNode(this). The componentDidMount() method of child components is invoked before that of parent components.</em></p>
<p><em>If you want to integrate with other JavaScript frameworks, set timers using setTimeout or setInterval, or send AJAX requests, perform those operations in this method.</em></p>
<p>Data binding is somewhat similar to AngularJS, you bind by assigning curly bracket to variable directly. Whereas in angular, you can use ng-bind or directly use double curly bracket.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I am doing a new project recently so I am trying to follow the react.js tutorial and make use of this new technology in my project. It is claimed that the concept of react.js is fondamentally different from AngularJS. For example AngularJS is a full MVC framework but ReactJS is only the View of the MVC. The following figure demonstrated the whole concept.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="Javascript" scheme="https://evertqin.github.io/blog/tags/Javascript/"/>
    
      <category term="ReactJS" scheme="https://evertqin.github.io/blog/tags/ReactJS/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS Study Note -- ngView and ngRoute(3)</title>
    <link href="https://evertqin.github.io/blog/2015/08/26/post19/"/>
    <id>https://evertqin.github.io/blog/2015/08/26/post19/</id>
    <published>2015-08-26T04:00:00.000Z</published>
    <updated>2017-06-23T21:41:36.695Z</updated>
    
    <content type="html"><![CDATA[<p>Tried a little big ngView and ngRoute, the basic concept is not so difficult to grasp. It is like regular V and C in MVC.<br>The function of this ngApp is to display different images when click on different links. Traditionally, using jQuery, we can just update the src of the image.<br>This ngApp is just for demo, i don’t think it has more advantage than just using jQuery. But it does quite fun to think of this in a VC way.</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;html ng-app=&quot;imageSelector&quot;&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script type=&apos;text/javascript&apos; src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.3/angular-route.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&quot;&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;main.css&quot;/&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;main.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;h3&gt;This is a test&lt;/h3&gt;</div><div class="line">    &lt;a href=&quot;/images/image0&quot;&gt;image0&lt;/a&gt;</div><div class="line">    &lt;a href=&quot;/images/small/image1&quot;&gt;image1&lt;/a&gt;</div><div class="line">    &lt;div class=&quot;image-select&quot; ng-controller=&quot;mainController as main&quot;&gt;</div><div class="line">      &lt;div ng-view&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>we need to include angularjs route module in the head.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">(function() &#123;</div><div class="line">    var imageSelector = angular.module(&apos;imageSelector&apos;, [&apos;ngRoute&apos;]);</div><div class="line">    imageSelector.config([&apos;$routeProvider&apos;, &apos;$locationProvider&apos;, function($routeProvider, $locationProvider)&#123;</div><div class="line">        $routeProvider.when(&apos;/images/:imageId&apos;,&#123;</div><div class="line">            template: &quot;&lt;div&gt;This is a image &#123;&#123;bigImage.params.imageId&#125;&#125; and size is &#123;&#123;bigImage.size&#125;&#125;&lt;img src=&apos;/images/image_0.jpg&apos;/&gt;&lt;/div&gt;&quot;,</div><div class="line">            controller:&apos;BigImageController&apos;,</div><div class="line">            controllerAs:&apos;bigImage&apos;</div><div class="line">        &#125;).when(&apos;/images/small/:imageId&apos;, &#123;</div><div class="line">            template: &quot;&lt;div&gt;This is a image &apos;&#123;&#123;smallImage.params.imageId&#125;&#125;&apos; and size is very very &#123;&#123;smallImage.size&#125;&#125;&lt;image src=&apos;/images/IMG_1822.jpg&apos; /&gt;&lt;/div&gt;&quot;,</div><div class="line">            controller:&apos;SmallImageController&apos;,</div><div class="line">            controllerAs:&apos;smallImage&apos;</div><div class="line">        &#125;);</div><div class="line">        $locationProvider.html5Mode(&#123;</div><div class="line">            enabled:true,</div><div class="line">            requireBase:false</div><div class="line">        &#125;);</div><div class="line">    &#125;]).controller(&apos;mainController&apos;,</div><div class="line">                   [&apos;$route&apos;, &apos;$routeParams&apos;, &apos;$location&apos;, function($route, $routeParams, $location)&#123;</div><div class="line">                       this.$route = $route;</div><div class="line">                       this.$routeParams = $routeParams;</div><div class="line">                       this.$location = $location;</div><div class="line">                   &#125;]).controller(&apos;BigImageController&apos;, [&apos;$routeParams&apos;, function($routeParams)&#123;</div><div class="line">                       this.size = &apos;Big&apos;;</div><div class="line">                       this.params = $routeParams;</div><div class="line">                   &#125;]).controller(&apos;SmallImageController&apos;, [&apos;$routeParams&apos;, function($routeParms)&#123;</div><div class="line">                       this.size = &apos;Small&apos;;</div><div class="line">                       this.params = $routeParms;</div><div class="line">                   &#125;]);</div><div class="line">    </div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>We need first config <code>$routeProvide</code> and <code>$locationProvide</code>. The first configs the route params, like we do in express.js. Following the tutorial, created two routes and provide two inline templates. Also need to specify which controller<br>to use for given route.</p>
<p>Then we need to implement controllers. The first <code>mainController</code> needs to be implement like we do for other angular apps. I am not sure about this yet, will update when I figure out. Then we implement two other controllers used by<br>two routes. They are not different from other controllers. However, instead of use <code>$scope</code> to pass data, here we use <code>this</code>. </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tried a little big ngView and ngRoute, the basic concept is not so difficult to grasp. It is like regular V and C in MVC.&lt;br&gt;The function of this ngApp is to display different images when click on different links. Traditionally, using jQuery, we can just update the src of the image.&lt;br&gt;This ngApp is just for demo, i don’t think it has more advantage than just using jQuery. But it does quite fun to think of this in a VC way.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="AngularJS" scheme="https://evertqin.github.io/blog/tags/AngularJS/"/>
    
      <category term="Javascript" scheme="https://evertqin.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS Study Note (2)</title>
    <link href="https://evertqin.github.io/blog/2015/08/25/post18/"/>
    <id>https://evertqin.github.io/blog/2015/08/25/post18/</id>
    <published>2015-08-25T04:00:00.000Z</published>
    <updated>2017-06-23T21:41:25.991Z</updated>
    
    <content type="html"><![CDATA[<p>Other Random notes about angularjs, I will add more to this.     </p>
<a id="more"></a>
<ol>
<li><p>Customize directives</p>
<p> Let’s continue the html from yesterday by adding a new controller. In this controller, I tried to use directives.</p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;html ng-app=&quot;firstDiv&quot;&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&quot;&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;main.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;h3&gt;This is my First app&lt;/h3&gt;</div><div class="line">    &lt;input type=&quot;text&quot; ng-model=&quot;happyInput&quot; ng-init=&quot;happyInput=&apos;sample&apos;&quot;/&gt;</div><div class="line">    &lt;p&gt;input: &#123;&#123; happyInput &#125;&#125;&lt;/p&gt;</div><div class="line">    &lt;h3 ng-bind=&quot;happyInput&quot;&gt;&lt;/h3&gt;</div><div class="line">    &lt;div ng-controller=&quot;firstController&quot;&gt;</div><div class="line">      &lt;p ng-bind=&quot;whereIsMyDataFrom&quot;&gt;&lt;/p&gt;</div><div class="line">      &lt;ul&gt;</div><div class="line">        &lt;li ng-repeat=&quot;person in personList |orderBy: &apos;-name&apos;&quot;&gt;&#123;&#123;person.name&#125;&#125;&lt;/li&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">      &lt;p&gt;&#123;&#123; whereIsMyDataFrom &#125;&#125;&lt;/p&gt;</div><div class="line">      &lt;p&gt;Simple Calculation: &#123;&#123; 1 + 1 + 2&#125;&#125;&lt;/p&gt;</div><div class="line">      &lt;h4&gt;&#123;&#123; currentTime &#125;&#125;&lt;/h4&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div ng-controller=&quot;secondController&quot;&gt;</div><div class="line">      &lt;my-customized-directive&gt;&lt;/my-customized-directive&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>


Notice I added `secondController` and a new html tag `&lt;my-customized-directive&gt;`. Here comes the js file

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">firstDivApp.controller(&apos;secondController&apos;, [&apos;$scope&apos;, function($scope)&#123;</div><div class="line">        $scope.sampleData = &quot;Sample Data&quot;;</div><div class="line">    &#125;])</div><div class="line">    .directive(&apos;myCustomizedDirective&apos;, function() &#123;</div><div class="line">        return &#123;</div><div class="line">            restrict:&apos;E&apos;,</div><div class="line">            template: &apos;SampleData goes here:  &#123;&#123; sampleData &#125;&#125;&apos;,</div><div class="line">        &#125;;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>


Here I added the new controller and declaresa new directive `myCustomizedDirective`.
I am restricting it usage to element only (or I can also make it attribute only by specifying `restrict:&apos;A&apos;`).
I&apos;m also declaring a template. I can also use `templateUrl` and specify the path to a html file. And replace with ` templateUrl: &apos;template.html&apos;`
</code></pre><ol>
<li><p>Isolating the scope</p>
<p> For previous implementation, if you want to use the directive for two people, you need to create two controllers because within a single controller, the customized<br>directive can only be used once. To solve this problem, we can isolate the scope of our directives.</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;html ng-app=&quot;firstDiv&quot;&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&quot;&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;main.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;h3&gt;This is my First app&lt;/h3&gt;</div><div class="line">    &lt;input type=&quot;text&quot; ng-model=&quot;happyInput&quot; ng-init=&quot;happyInput=&apos;sample&apos;&quot;/&gt;</div><div class="line">    &lt;p&gt;input: &#123;&#123; happyInput &#125;&#125;&lt;/p&gt;</div><div class="line">    &lt;h3 ng-bind=&quot;happyInput&quot;&gt;&lt;/h3&gt;</div><div class="line">    &lt;!-- NEW STUFF BELOW --&gt;</div><div class="line">    &lt;div ng-controller=&quot;firstController&quot;&gt;</div><div class="line">      &lt;p ng-bind=&quot;whereIsMyDataFrom&quot;&gt;&lt;/p&gt;</div><div class="line">      &lt;ul&gt;</div><div class="line">        &lt;li ng-repeat=&quot;person in personList |orderBy: &apos;-name&apos;&quot;&gt;&#123;&#123;person.name&#125;&#125;&lt;/li&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">      &lt;p&gt;&#123;&#123; whereIsMyDataFrom &#125;&#125;&lt;/p&gt;</div><div class="line">      &lt;p&gt;Simple Calculation: &#123;&#123; 1 + 1 + 2&#125;&#125;&lt;/p&gt;</div><div class="line">      &lt;h4&gt;&#123;&#123; currentTime &#125;&#125;&lt;/h4&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div ng-controller=&quot;secondController&quot;&gt;</div><div class="line">      &lt;my-customized-directive info=&apos;people1&apos;&gt;&lt;/my-customized-directive&gt;</div><div class="line">      &lt;hr/&gt;</div><div class="line">      &lt;my-customized-directive info=&apos;people2&apos;&gt;&lt;/my-customized-directive&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>Make modification to the js file:

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">firstDivApp.controller(&apos;secondController&apos;, [&apos;$scope&apos;, function($scope)&#123;</div><div class="line">        $scope.sampleData = &quot;Sample Data&quot;;</div><div class="line">        $scope.people1 = &#123;name: &apos;Tom&apos;, address:&apos;yyy street&apos;&#125;;</div><div class="line">        $scope.people2 = &#123;name: &apos;Dio&apos;, address:&apos;ydsdsdsdy stredet&apos;&#125;;</div><div class="line">    &#125;])</div><div class="line">    .directive(&apos;myCustomizedDirective&apos;, function() &#123;</div><div class="line">        return &#123;</div><div class="line">            restrict:&apos;E&apos;,</div><div class="line">            scope:&#123;</div><div class="line">            peopleInfo:&quot;=info&quot;</div><div class="line">        &#125;,</div><div class="line">            templateUrl: &apos;template.html&apos;</div><div class="line">        &#125;;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>


Here, the `people1` binds to attribute `info=&apos;people1&apos;`, `people2` binds to attribute `info=&apos;people2&apos;`.
By doing this, we are 
and update the `template.html`. 

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SampleData goes here:  &#123;&#123; sampleData &#125;&#125;</div><div class="line">People info: name &#123;&#123;peopleInfo.name&#125;&#125;, address: &#123;&#123;peopleInfo.address&#125;&#125;</div></pre></td></tr></table></figure>
</code></pre><ol>
<li><p>Manipulate DOM object</p>
<p> The key here is to return an object with link function. And current DOM<br>can be manipulated by using the element varialbe.</p>
<p> Let’s add the following lines to the html</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div ng-controller=&quot;thirdController&quot;&gt;</div><div class="line">    &lt;my-time-update format=&quot;&apos;M/d/yy h:mm:ss a&apos;&quot;&gt;&lt;/my-time-update&gt;</div><div class="line">    &lt;hr/&gt;</div><div class="line">    &lt;my-time-update format=&quot;&apos;MM/d/yy h:mm:ss a&apos;&quot;&gt;&lt;/my-time-update&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>We then create a third controller:

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">firstDivApp.controller(&apos;thirdController&apos;, [&apos;$scope&apos;, function($scope)&#123;&#125;])</div><div class="line">.directive(&apos;myTimeUpdate&apos;, [&apos;$interval&apos;, &apos;dateFilter&apos;, function($interval, dateFilter) &#123;</div><div class="line">    var link = function(scope, element, attrs)&#123;</div><div class="line">        var format;</div><div class="line">        var timeoutId;</div><div class="line">         function updateTime()&#123;</div><div class="line">            console.log(format);</div><div class="line">            element.text(dateFilter(new Date(), format));</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        scope.$watch(attrs.format, function(value)&#123;</div><div class="line">            format = value;</div><div class="line">            updateTime();</div><div class="line">        &#125;);</div><div class="line">        timeoutId = $interval(function() &#123;</div><div class="line">            updateTime();</div><div class="line">        &#125;,1000);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    return &#123;</div><div class="line">        link:link</div><div class="line">    &#125;;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>


We create a link function which takes `scope, element, attrs` as arguments. scope is the scope of current directive.
The above function update the element text of the scope every second.
</code></pre><ol>
<li>Directive that wraps other contents</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Other Random notes about angularjs, I will add more to this.     &lt;/p&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="AngularJS" scheme="https://evertqin.github.io/blog/tags/AngularJS/"/>
    
      <category term="Javascript" scheme="https://evertqin.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS Study Note (1)</title>
    <link href="https://evertqin.github.io/blog/2015/08/24/post17/"/>
    <id>https://evertqin.github.io/blog/2015/08/24/post17/</id>
    <published>2015-08-24T04:00:00.000Z</published>
    <updated>2017-06-23T21:41:11.007Z</updated>
    
    <content type="html"><![CDATA[<p>I have been learning AngularJS recently. Although people say Angular might be okay for small scale websites, it becomes very slow as the website grow larger. Many people turn to React.js for better performace. But I do think it<br>is useful to learn the concept of Angular since it has been there for quite a while and there are a lot of cool concepts.</p>
<a id="more"></a>
<ol>
<li><p>Terminologies</p>
<p> At a high level, directives are markers on a DOM element (such as an attribute, element name, comment or CSS class) that tell AngularJS’s HTML compiler ($compile) to attach a specified behavior to that DOM element or even transform the DOM element and its children.(<a href="https://docs.angularjs.org/guide/directive" target="_blank" rel="external">From Angular document</a>)</p>
<p> There are several important built-in angular directives (ngApp, npBind, ngController, etc). You will know ngApp and ng-app are basically same thing because angular always covert to camelcase.</p>
</li>
<li><p>Baby Step</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;html ng-app&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;h3&gt;This is my First app&lt;/h3&gt;</div><div class="line">    &lt;input type=&quot;text&quot; ng-model=&quot;happyInput&quot; ng-init=&quot;happyInput=&apos;sample&apos;&quot;/&gt;</div><div class="line">    &lt;p&gt;input: &#123;&#123; happyInput &#125;&#125;&lt;/p&gt;</div><div class="line">    &lt;h3 ng-bind=&quot;happyInput&quot;&gt;&lt;/h3&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p> To serve this web page, open it directly in browser, but I prefer using python to server static page: navigate to the page containing the above page (index.html). run <code>python3.4 -m http.server</code>. Then you can navigate to <code>http://localhost:8000</code> to view the page.</p>
<p> The above page is simple, it declares this is a angular app (“ng-app” directive only). It also declares ng-model for the input textbox. After this binding, we can use whatever data inside input by calling  or explicitly bind it to a html tag (h3 above). The ng-init directive is useful when you want to specify a initial value for your ng-model.</p>
<p> An angular app cannot be simpler than above. In reality, most of them are pretty complicated.</p>
</li>
<li><p>we need javascript now</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;html ng-app=&quot;firstDiv&quot;&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&quot;&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;main.js&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;h3&gt;This is my First app&lt;/h3&gt;</div><div class="line">    &lt;input type=&quot;text&quot; ng-model=&quot;happyInput&quot; ng-init=&quot;happyInput=&apos;sample&apos;&quot;/&gt;</div><div class="line">    &lt;p&gt;input: &#123;&#123; happyInput &#125;&#125;&lt;/p&gt;</div><div class="line">    &lt;h3 ng-bind=&quot;happyInput&quot;&gt;&lt;/h3&gt;</div><div class="line">    &lt;!-- !!!NEW STUFF BELOW!!! --&gt;</div><div class="line">    &lt;div ng-controller=&quot;firstController&quot;&gt;</div><div class="line">      &lt;ul&gt;</div><div class="line">        &lt;li ng-repeat=&quot;person in personList |orderBy: &apos;-name&apos;&quot;&gt;&#123;&#123;person.name&#125;&#125;&lt;/li&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">      &lt;p&gt;&#123;&#123; whereIsMyDataFrom &#125;&#125;&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p> What’s new here:</p>
<ul>
<li>Added a name for our ng-app;</li>
<li>Added a ng-controller=”firstController” for a div;</li>
<li>Used the ng-bind “whereIsMyDataFrom”, but where is the data?</li>
<li><p>Used ng-repeat</p>
<p>Take a look at the js file included in the html<br>main.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">(function() &#123;</div><div class="line">  var firstDivApp = angular.module(&apos;firstDiv&apos;, []);</div><div class="line">  firstDivApp.controller(&apos;firstController&apos;, function($scope)&#123;</div><div class="line">      $scope.personList = [</div><div class="line">          &#123;</div><div class="line">              name: &quot;Zohn&quot;, address: &quot;somewhere&quot;</div><div class="line">          &#125;,</div><div class="line">          &#123;</div><div class="line">              name: &quot;Tom&quot;, address: &quot;somewhere else&quot;</div><div class="line">          &#125;</div><div class="line">      ];</div><div class="line">      $scope.whereIsMyDataFrom = &quot;My Data is from Here&quot;;</div><div class="line">  &#125;);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p><code>$scope</code> is a special variable for passing date to and from html view and js controller. Here we see where our “whereIsMyDataFrom” is populated and where our personList come from. The orderBy is another concept called ng-filter, normally, it sorts data in ascending order by the field specified. Adding a minus sign <code>-</code> will sort data in descending order.<br>(Note: I actually think it is better to write the controller logic in the following way because of it follows more closely to the dependence injection pattern.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">firstDivApp.controller(&apos;firstController&apos;, [&apos;$scope&apos;, function($scope)&#123;</div><div class="line">   $scope.personList = [</div><div class="line">       &#123;</div><div class="line">           name: &quot;Zohn&quot;, address: &quot;somewhere&quot;</div><div class="line">       &#125;,</div><div class="line">       &#123;</div><div class="line">           name: &quot;Tom&quot;, address: &quot;somewhere else&quot;</div><div class="line">       &#125;</div><div class="line">   ];</div><div class="line">   $scope.whereIsMyDataFrom = &quot;My Data is from Here&quot;;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<pre><code>The second argument of the `module.controller(...)` has two parts. First part is the objects to be injected, the last element of the list usually contains the previous list elements (quote removed) as arguments. Although you can get away without specifying the injected object names for built-in variables, I do think it is clearly to use them.
</code></pre><ol>
<li><p>fun with dependence injection(DI)<br> I think this one is very easy to get hands on, there are three steps:</p>
<ol>
<li>put the the name of dependence you want to inject in the controller dependence list as stated above;</li>
<li><p>call the .factory on the controller, return a function</p>
<p>Add <code>&lt;h4&gt;&lt;/h4&gt;</code> somewhere iside firstController.</p>
<p>Modify main.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">(function() &#123;</div><div class="line">var firstDivApp = angular.module(&apos;firstDiv&apos;, []);</div><div class="line"></div><div class="line">firstDivApp.controller(&apos;firstController&apos;, [&apos;$scope&apos;,&apos;getCurrentTime&apos;, function($scope, getCurrentTime)&#123;</div><div class="line">    $scope.personList = [</div><div class="line">        &#123;</div><div class="line">            name: &quot;Zohn&quot;, address: &quot;somewhere&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            name: &quot;Tom&quot;, address: &quot;somewhere else&quot;</div><div class="line">        &#125;</div><div class="line">    ];</div><div class="line">    $scope.whereIsMyDataFrom = &quot;My Data is from Here&quot;;</div><div class="line">    $scope.currentTime = getCurrentTime(&apos;M/d/yy h:mm:ss a&apos;);</div><div class="line">&#125;])</div><div class="line">    .factory(&apos;getCurrentTime&apos;, [&apos;dateFilter&apos;, function(dateFilter, format)&#123;</div><div class="line">        var date = new Date();</div><div class="line"></div><div class="line">        return  function(format)&#123;</div><div class="line">            return dateFilter(new Date(), format);</div><div class="line">        &#125;;</div><div class="line">    &#125;]);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<pre><code>Notice the factory part. Here we need a function getCurrentTime which takes a single paramenter &quot;format&quot;. 
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have been learning AngularJS recently. Although people say Angular might be okay for small scale websites, it becomes very slow as the website grow larger. Many people turn to React.js for better performace. But I do think it&lt;br&gt;is useful to learn the concept of Angular since it has been there for quite a while and there are a lot of cool concepts.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="AngularJS" scheme="https://evertqin.github.io/blog/tags/AngularJS/"/>
    
      <category term="Javascript" scheme="https://evertqin.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Modifed Python-Markdown for better fenced code support</title>
    <link href="https://evertqin.github.io/blog/2015/08/05/post16/"/>
    <id>https://evertqin.github.io/blog/2015/08/05/post16/</id>
    <published>2015-08-05T04:00:00.000Z</published>
    <updated>2017-06-23T21:41:00.055Z</updated>
    
    <content type="html"><![CDATA[<p>Today I committed a modifed version of Python-Markdown. Previously, this pip library only supports fenced block at document root level. It is quite inconvenient as often times, we need to nest a code blog inside an ordered list. You can check my <a href="http://blog.tripplan.info/blog/post/item/14" target="_blank" rel="external">previous post</a> for a demo.</p>
<a id="more"></a>
<p>You can install it via pip through my git repo:</p>
<p><code>pip install -e git+https://github.com/evertqin/Python-Markdown#egg=markdown</code></p>
<p>After installation, you can start embedding code within <code>&lt;li&gt;</code> tags, start by indenting `<figure class="highlight plain"><figcaption><span>at the same level as the list. The indentation level of the embeded code control the indentation of the outputing html.</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Here I am aligning the code block at the root level. </div><div class="line"></div><div class="line">1. This is a sample</div><div class="line"></div><div class="line">    ~~~~&#123;.js&#125;</div><div class="line">var test = new Object();</div></pre></td></tr></table></figure></p>
<ol>
<li><p>This is another List</p>
<ol>
<li><p>Nested List</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var test = &apos;test&apos;;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<pre><code>    Some other text within the list

2. Nested List

    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var test = &apos;test&apos;;</div></pre></td></tr></table></figure>
</code></pre><ol>
<li>Continue the list</li>
</ol>
<p>The code can be checked out from <a href="https://github.com/evertqin/Python-Markdown" target="_blank" rel="external">https://github.com/evertqin/Python-Markdown</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I committed a modifed version of Python-Markdown. Previously, this pip library only supports fenced block at document root level. It is quite inconvenient as often times, we need to nest a code blog inside an ordered list. You can check my &lt;a href=&quot;http://blog.tripplan.info/blog/post/item/14&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;previous post&lt;/a&gt; for a demo.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="Python" scheme="https://evertqin.github.io/blog/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>C# and C++ Interop Demonstration</title>
    <link href="https://evertqin.github.io/blog/2015/08/03/post15/"/>
    <id>https://evertqin.github.io/blog/2015/08/03/post15/</id>
    <published>2015-08-03T04:00:00.000Z</published>
    <updated>2017-06-23T21:42:53.740Z</updated>
    
    <content type="html"><![CDATA[<p>One interesting feature of C# is that you can directly use unmanaged dlls from the managed code. There are different ways to do this, such as: 1) using a unsafe block and write unmanaged code directly. It is tested that the performance of these unmanaged codes is somewhate better than managed code. 2) use Marshall and dllimport from C# and dllexport from C++; 3) use 3rd party libraries such as swig.exe. Here I am going to introduce using dllimport because I think this is the most native way to deal with interop requirements.</p>
<a id="more"></a>
<p>The C++ source files need to be specially wrapped to expose function interfaces to managed code: in the header file: (headers.hh), need to</p>
<ul>
<li>Wrap all the function signatures in <code>extern &quot;C&quot;</code> because we don’t want C++ compiler to mangle the function name.</li>
<li>append <code>__declspec(dllexport)</code> before function declearation.</li>
</ul>
<p>a basic example, first creat an empty C++ dll project and add two files: headers.hh and source.cc. In header.hh file, add the following lines:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#ifndef CPPLIB_HEADERS_HH</div><div class="line">#define CPPLIB_HEADERS_HH</div><div class="line"></div><div class="line">extern &quot;C&quot;</div><div class="line">&#123;</div><div class="line">	__declspec(dllexport) void get_simple_type(int num);</div><div class="line">&#125;</div><div class="line"></div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>And in source.cc file, add the following lines:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#include &quot;headers.hh&quot;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;fstream&gt;</div><div class="line"></div><div class="line">void get_simple_type(int num) &#123;</div><div class="line">	std::cout &lt;&lt; &quot;Number: \&quot;&quot; &lt;&lt; num &lt;&lt; &quot;\&quot;&quot; &lt;&lt; std::endl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Here we are passing a simple int from C# to C++ and print out.</p>
<p>In a separate C# project, created in the same solution, add the following lines</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[DllImport(&quot;CppLib.dll&quot;, CallingConvention = CallingConvention.Cdecl)]</div><div class="line">public static extern void get_simple_type(int num);</div><div class="line"></div><div class="line">public void TransferSimpleType()</div><div class="line">&#123;</div><div class="line">    int num = 5;</div><div class="line">    get_simple_type(num);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Run the project, we should be able to see “Number: “5”” from console window.</p>
<p>Getting return value is also very straight-forward. we add another line or function declearation into the extern “C”:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">__declspec(dllexport) double return_simple_type(double num);</div></pre></td></tr></table></figure>
<p>Then implement the above function in source.cc</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">double return_simple_type(double num) &#123;</div><div class="line">	return 4.9 * num;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In C#, do the following to catch the return value:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[DllImport(&quot;CppLib.dll&quot;, CallingConvention = CallingConvention.Cdecl)]</div><div class="line">public static extern double return_simple_type(double num);</div><div class="line"></div><div class="line">public void RetriveSimpleType()</div><div class="line">&#123;</div><div class="line">    double num = 5.0;</div><div class="line">    double ret = return_simple_type(num);</div><div class="line">    Console.WriteLine(string.Format(&quot;From RetriveSimpleType we get: \&quot;&#123;0&#125;\&quot;&quot;, ret));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Run the above code, you should see “From RetriveSimple we get: “24.5”</p>
<p>The above examples are both quite easy to deal with, what’s more interesting is dealing with customized data structures and arries, here we need to use functions in the Marshall class. Suppose we want to calculate on a double[] array and return a double[], we can not just write <code>double[] calculate(double[] input);</code> because in C++, we have no idea how large is the double array because what we are passing into C++ got converted to a double <em>.. Also C++ can only return a double </em>, and it up to us to figure out how large is the double[]. Therefore, we need to find a way to specify the size of the array.</p>
<p>The input arguments are simple, we only need to add another <code>int size</code> to the argument list. To pass back the return size of the array, we need to define same struct in both C# and C++.</p>
<p>in C++:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">struct OneDimRetArray</div><div class="line">&#123;</div><div class="line">	double* content;</div><div class="line">	int size;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">typedef struct OneDimRetArray OneDimRetArray_t;</div></pre></td></tr></table></figure>
<p>in C#</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">struct OneDimRetArray</div><div class="line">&#123;</div><div class="line">    public IntPtr content;</div><div class="line">    public int size;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Notice that all the pointer types in C++ got converted to System.IntPtr in C#.</p>
<p>Now let’s define some functions:</p>
<p>In C++:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">__declspec(dllexport) OneDimRetArray_t* make_1d_array(const double* input, int size);</div><div class="line">__declspec(dllexport) int release_one_dim(OneDimRetArray_t* toFree);</div></pre></td></tr></table></figure>
<p>Notice since we use pointers and we dynamically allocated memory, we need another function to clean the memory;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">OneDimRetArray_t * make_1d_array(const double * input, int size) &#123;</div><div class="line">	OneDimRetArray_t * result = new OneDimRetArray_t();</div><div class="line">	result-&gt;content = new double[size * 2];</div><div class="line">	result-&gt;size = size * 2;</div><div class="line"></div><div class="line">	const double * p = input;</div><div class="line">	for (int i = 0, j = 0; i &lt; size; ++i) &#123;</div><div class="line">		result-&gt;content[j++] = *p;</div><div class="line">		result-&gt;content[j++] = *p;</div><div class="line">		p++;</div><div class="line">	&#125;</div><div class="line">	return result;</div><div class="line">&#125;</div><div class="line">int release_one_dim(OneDimRetArray_t * ptr_to_free) &#123;</div><div class="line">	if (ptr_to_free == NULL) &#123;</div><div class="line">		return -1;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if (ptr_to_free-&gt;content != NULL) &#123;</div><div class="line">		delete[] ptr_to_free-&gt;content;</div><div class="line">		ptr_to_free-&gt;content = NULL;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	delete ptr_to_free;</div><div class="line">	ptr_to_free = NULL;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>in C#, we need to call the above function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[DllImport(&quot;CppLib.dll&quot;)]</div><div class="line">public static extern IntPtr make_1d_array(double[] nums, int size);</div><div class="line">[DllImport(&quot;CppLib.dll&quot;)]</div><div class="line">public static extern int release_one_dim(IntPtr toFree);</div><div class="line"></div><div class="line">public void RetriveArrayType()</div><div class="line">&#123;</div><div class="line">    Console.WriteLine(&quot;Retriving Array&quot;);</div><div class="line">    double[] nums = &#123; 1, 2, 3, 4, 5 &#125;;</div><div class="line">    IntPtr ptr = make_1d_array(nums, nums.Length);</div><div class="line">    OneDimRetArray result = (OneDimRetArray)Marshal.PtrToStructure(ptr,</div><div class="line">                            typeof(OneDimRetArray));</div><div class="line"></div><div class="line">    double[] num = new double[result.size];</div><div class="line">    Marshal.Copy(result.content, num, 0, result.size);</div><div class="line">    foreach (double d in num)</div><div class="line">    &#123;</div><div class="line">        Console.Write(d + &quot;, &quot;);</div><div class="line">    &#125;</div><div class="line">    Console.WriteLine();</div><div class="line"></div><div class="line">    int release = release_one_dim(ptr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Run the whole project, you should see the following output.</p>
<p><img src="/home/ruogu/Pictures/Capture.PNG" alt="Run Result"></p>
<p>You can find the source code on <a href="https://github.com/evertqin/DotNetDemos/tree/master/SharpCppInterop" target="_blank" rel="external">GitHub</a></p>
<font color="red">Comment (09/01/2015): I think there is something miss about releasing memory when I first wrote it. Now i think the correct way<br>to do it is by using the follong Marshal functions: <code>Marshal.DestroyStructure</code>, <code>Marshal.FreeHGlobal</code>.<br></font>

<p>For example, in my previous example, I created a struct called <code>OneDimRetArray</code> . To proper release the memory, I need the folling function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">struct OneDimRetArray</div><div class="line">&#123;</div><div class="line">    public IntPtr content;</div><div class="line">    public int size;</div><div class="line">    </div><div class="line">    public static void Free(OneDimRetArray result)</div><div class="line">    &#123;</div><div class="line">        Marshal.FreeHGlobal(result.content);</div><div class="line">        result.content = IntPtr.Zero;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void Free(IntPtr ptr)</div><div class="line">    &#123;</div><div class="line">        OneDimRetArray result = (OneDimRetArray) Marshal.PtrToStructure(ptr, typeof (OneDimRetArray));</div><div class="line">        Free(result);</div><div class="line">        Marshal.DestroyStructure(ptr, typeof (OneDimRetArray));</div><div class="line">        Marshal.FreeHGlobal(ptr);</div><div class="line">        ptr = IntPtr.Zero;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One interesting feature of C# is that you can directly use unmanaged dlls from the managed code. There are different ways to do this, such as: 1) using a unsafe block and write unmanaged code directly. It is tested that the performance of these unmanaged codes is somewhate better than managed code. 2) use Marshall and dllimport from C# and dllexport from C++; 3) use 3rd party libraries such as swig.exe. Here I am going to introduce using dllimport because I think this is the most native way to deal with interop requirements.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="C#" scheme="https://evertqin.github.io/blog/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Transfering Data between ASP.NET Client and Server</title>
    <link href="https://evertqin.github.io/blog/2015/08/03/post14/"/>
    <id>https://evertqin.github.io/blog/2015/08/03/post14/</id>
    <published>2015-08-03T04:00:00.000Z</published>
    <updated>2017-06-23T21:43:00.167Z</updated>
    
    <content type="html"><![CDATA[<p>Here I am going to summarize commonly used ways to pass data between server and client. There are traditional ways along with some ASP.NET specific ways.</p>
<a id="more"></a>
<ol>
<li><p>Ajax request, using jQuery Library, if you are using webforms, then:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">  type: &quot;POST&quot;,</div><div class="line">  url: &quot;Analysis.aspx/getStatus&quot;,</div><div class="line">  data: &#123;&#125;,</div><div class="line">  contentType: &quot;application/json; charset=utf-8&quot;,</div><div class="line">  dataType: &quot;json&quot;,</div><div class="line">  success: function (message) &#123;</div><div class="line">    console.log(message);</div><div class="line">  &#125;,</div><div class="line">  error: function(xhr, status, error) &#123;</div><div class="line">    console.log(xhr);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p> In your code behind (Analysis.aspx.cs), you should have a public static method:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">using System.Web.Services;</div><div class="line"></div><div class="line">[WebMethod]</div><div class="line">public static string GetStatus()</div><div class="line">&#123;</div><div class="line">  return this.message;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> In MVC model, it is simpler because you only needs to provide your restful service endpoint to the url field.</p>
<p> The advantage of using ajax is 1) it is excuted immediately after html is loaded and it is synchronized.</p>
</li>
<li><p>Using code block<br> The above code behind can also be called be embedding the following line into your javascript part of the page:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var message = &quot;&lt;% GetStatus() %&gt;&quot;;</div></pre></td></tr></table></figure>
<p> Note that by default the evaluated return for a code behind function does not include quotes, so if it is a string type, you have to add quotes manually.</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Here I am going to summarize commonly used ways to pass data between server and client. There are traditional ways along with some ASP.NET specific ways.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://evertqin.github.io/blog/tags/Technology/"/>
    
      <category term="C#" scheme="https://evertqin.github.io/blog/tags/C/"/>
    
  </entry>
  
</feed>
